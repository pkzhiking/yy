!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSIGN_TO_CONSTANT_ANALYZER_H	include/AssignToConstantAnalyzer.h	9;"	d
AssignToConstantAnalyzer	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::AssignToConstantAnalyzer()$/;"	f	class:AssignToConstantAnalyzer	signature:()
AssignToConstantAnalyzer	include/AssignToConstantAnalyzer.h	/^	AssignToConstantAnalyzer();$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:()
AssignToConstantAnalyzer	include/AssignToConstantAnalyzer.h	/^class AssignToConstantAnalyzer : public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
AssignToConstantAnalyzer::AssignToConstantAnalyzer	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::AssignToConstantAnalyzer()$/;"	f	class:AssignToConstantAnalyzer	signature:()
AssignToConstantAnalyzer::AssignToConstantAnalyzer	include/AssignToConstantAnalyzer.h	/^	AssignToConstantAnalyzer();$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:()
AssignToConstantAnalyzer::analyzeNode	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:AssignToConstantAnalyzer	signature:(GNode* node,const vector<int>& context)
AssignToConstantAnalyzer::analyzeNode	include/AssignToConstantAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:(GNode*,const vector<int>&)
AssignToConstantAnalyzer::clearAnalyzerState	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::clearAnalyzerState()$/;"	f	class:AssignToConstantAnalyzer	signature:()
AssignToConstantAnalyzer::clearAnalyzerState	include/AssignToConstantAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:()
AssignToConstantAnalyzer::finishAnalyze	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::finishAnalyze()$/;"	f	class:AssignToConstantAnalyzer	signature:()
AssignToConstantAnalyzer::finishAnalyze	include/AssignToConstantAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:()
AssignToConstantAnalyzer::startAnalyze	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::startAnalyze()$/;"	f	class:AssignToConstantAnalyzer	signature:()
AssignToConstantAnalyzer::startAnalyze	include/AssignToConstantAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:()
AssignToConstantAnalyzer::~AssignToConstantAnalyzer	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::~AssignToConstantAnalyzer()$/;"	f	class:AssignToConstantAnalyzer	signature:()
AssignToConstantAnalyzer::~AssignToConstantAnalyzer	include/AssignToConstantAnalyzer.h	/^	virtual ~AssignToConstantAnalyzer();$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:()
BAD_MEM_OPERATION_CALL_ANALYZER_H	include/BadMemOperationCallAnalyzer.h	9;"	d
BIT_NOT_EXPR_ANALYZER_H	include/BitNotExprAnalyzer.h	6;"	d
BadMemOperationCallAnalyzer	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::BadMemOperationCallAnalyzer()$/;"	f	class:BadMemOperationCallAnalyzer	signature:()
BadMemOperationCallAnalyzer	include/BadMemOperationCallAnalyzer.h	/^	BadMemOperationCallAnalyzer();$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:()
BadMemOperationCallAnalyzer	include/BadMemOperationCallAnalyzer.h	/^class BadMemOperationCallAnalyzer : public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
BadMemOperationCallAnalyzer::BadMemOperationCallAnalyzer	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::BadMemOperationCallAnalyzer()$/;"	f	class:BadMemOperationCallAnalyzer	signature:()
BadMemOperationCallAnalyzer::BadMemOperationCallAnalyzer	include/BadMemOperationCallAnalyzer.h	/^	BadMemOperationCallAnalyzer();$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:()
BadMemOperationCallAnalyzer::analyzeNode	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:BadMemOperationCallAnalyzer	signature:(GNode* node,const vector<int>& context)
BadMemOperationCallAnalyzer::analyzeNode	include/BadMemOperationCallAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:(GNode*,const vector<int>&)
BadMemOperationCallAnalyzer::clearAnalyzerState	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::clearAnalyzerState()$/;"	f	class:BadMemOperationCallAnalyzer	signature:()
BadMemOperationCallAnalyzer::clearAnalyzerState	include/BadMemOperationCallAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:()
BadMemOperationCallAnalyzer::deferedAnalyze	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::deferedAnalyze(GNode* node,const vector<int>& context)$/;"	f	class:BadMemOperationCallAnalyzer	signature:(GNode* node,const vector<int>& context)
BadMemOperationCallAnalyzer::deferedAnalyze	include/BadMemOperationCallAnalyzer.h	/^	void deferedAnalyze(GNode*,const vector<int>&);$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:(GNode*,const vector<int>&)
BadMemOperationCallAnalyzer::finishAnalyze	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::finishAnalyze()$/;"	f	class:BadMemOperationCallAnalyzer	signature:()
BadMemOperationCallAnalyzer::finishAnalyze	include/BadMemOperationCallAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:()
BadMemOperationCallAnalyzer::isParamPointingToPOD	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::isParamPointingToPOD(GNode* node)$/;"	f	class:BadMemOperationCallAnalyzer	signature:(GNode* node)
BadMemOperationCallAnalyzer::isParamPointingToPOD	include/BadMemOperationCallAnalyzer.h	/^	bool isParamPointingToPOD(GNode* node);$/;"	p	class:BadMemOperationCallAnalyzer	access:private	signature:(GNode* node)
BadMemOperationCallAnalyzer::isParamPointingToPrimitive	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::isParamPointingToPrimitive(GNode* node)$/;"	f	class:BadMemOperationCallAnalyzer	signature:(GNode* node)
BadMemOperationCallAnalyzer::isParamPointingToPrimitive	include/BadMemOperationCallAnalyzer.h	/^	bool isParamPointingToPrimitive(GNode* node);$/;"	p	class:BadMemOperationCallAnalyzer	access:private	signature:(GNode* node)
BadMemOperationCallAnalyzer::mContextArray	include/BadMemOperationCallAnalyzer.h	/^	vector<vector<int> > mContextArray;$/;"	m	class:BadMemOperationCallAnalyzer	access:private
BadMemOperationCallAnalyzer::mNodeArrayToBeAnalyzed	include/BadMemOperationCallAnalyzer.h	/^	vector<GNode*> mNodeArrayToBeAnalyzed;$/;"	m	class:BadMemOperationCallAnalyzer	access:private
BadMemOperationCallAnalyzer::startAnalyze	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::startAnalyze()$/;"	f	class:BadMemOperationCallAnalyzer	signature:()
BadMemOperationCallAnalyzer::startAnalyze	include/BadMemOperationCallAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:()
BadMemOperationCallAnalyzer::~BadMemOperationCallAnalyzer	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::~BadMemOperationCallAnalyzer()$/;"	f	class:BadMemOperationCallAnalyzer	signature:()
BadMemOperationCallAnalyzer::~BadMemOperationCallAnalyzer	include/BadMemOperationCallAnalyzer.h	/^	virtual ~BadMemOperationCallAnalyzer();$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:()
BitNotExprAnalyzer	BitNotExprAnalyzer.cpp	/^BitNotExprAnalyzer::BitNotExprAnalyzer(){$/;"	f	class:BitNotExprAnalyzer	signature:()
BitNotExprAnalyzer	include/BitNotExprAnalyzer.h	/^	BitNotExprAnalyzer();$/;"	p	class:BitNotExprAnalyzer	access:public	signature:()
BitNotExprAnalyzer	include/BitNotExprAnalyzer.h	/^class BitNotExprAnalyzer : public BaseAnalyzer{$/;"	c	inherits:BaseAnalyzer
BitNotExprAnalyzer::BitNotExprAnalyzer	BitNotExprAnalyzer.cpp	/^BitNotExprAnalyzer::BitNotExprAnalyzer(){$/;"	f	class:BitNotExprAnalyzer	signature:()
BitNotExprAnalyzer::BitNotExprAnalyzer	include/BitNotExprAnalyzer.h	/^	BitNotExprAnalyzer();$/;"	p	class:BitNotExprAnalyzer	access:public	signature:()
BitNotExprAnalyzer::analyzeNode	BitNotExprAnalyzer.cpp	/^void BitNotExprAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:BitNotExprAnalyzer	signature:( GNode *node, const vector< int > &context )
BitNotExprAnalyzer::analyzeNode	include/BitNotExprAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector< int > & );$/;"	p	class:BitNotExprAnalyzer	access:public	signature:( GNode *, const vector< int > & )
BitNotExprAnalyzer::clearAnalyzerState	include/BitNotExprAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:BitNotExprAnalyzer	access:public	signature:()
BitNotExprAnalyzer::finishAnalyze	BitNotExprAnalyzer.cpp	/^void BitNotExprAnalyzer::finishAnalyze(){$/;"	f	class:BitNotExprAnalyzer	signature:()
BitNotExprAnalyzer::finishAnalyze	include/BitNotExprAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:BitNotExprAnalyzer	access:public	signature:()
BitNotExprAnalyzer::startAnalyze	BitNotExprAnalyzer.cpp	/^void BitNotExprAnalyzer::startAnalyze(){$/;"	f	class:BitNotExprAnalyzer	signature:()
BitNotExprAnalyzer::startAnalyze	include/BitNotExprAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:BitNotExprAnalyzer	access:public	signature:()
BitNotExprAnalyzer::~BitNotExprAnalyzer	BitNotExprAnalyzer.cpp	/^BitNotExprAnalyzer::~BitNotExprAnalyzer(){$/;"	f	class:BitNotExprAnalyzer	signature:()
BitNotExprAnalyzer::~BitNotExprAnalyzer	include/BitNotExprAnalyzer.h	/^	virtual ~BitNotExprAnalyzer();$/;"	p	class:BitNotExprAnalyzer	access:public	signature:()
ConditionInLoopAnalyzer	ConditionInLoopAnalyzer.cpp	/^ConditionInLoopAnalyzer::ConditionInLoopAnalyzer(){$/;"	f	class:ConditionInLoopAnalyzer	signature:()
ConditionInLoopAnalyzer	include/ConditionInLoopAnalyzer.h	/^	ConditionInLoopAnalyzer();$/;"	p	class:ConditionInLoopAnalyzer	access:public	signature:()
ConditionInLoopAnalyzer	include/ConditionInLoopAnalyzer.h	/^class ConditionInLoopAnalyzer : public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
ConditionInLoopAnalyzer::ConditionInLoopAnalyzer	ConditionInLoopAnalyzer.cpp	/^ConditionInLoopAnalyzer::ConditionInLoopAnalyzer(){$/;"	f	class:ConditionInLoopAnalyzer	signature:()
ConditionInLoopAnalyzer::ConditionInLoopAnalyzer	include/ConditionInLoopAnalyzer.h	/^	ConditionInLoopAnalyzer();$/;"	p	class:ConditionInLoopAnalyzer	access:public	signature:()
ConditionInLoopAnalyzer::analyzeNode	ConditionInLoopAnalyzer.cpp	/^ConditionInLoopAnalyzer::analyzeNode(GNode* node,const vector<int>& context){$/;"	f	class:ConditionInLoopAnalyzer	signature:(GNode* node,const vector<int>& context)
ConditionInLoopAnalyzer::analyzeNode	include/ConditionInLoopAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:ConditionInLoopAnalyzer	access:public	signature:(GNode*,const vector<int>&)
ConditionInLoopAnalyzer::clearAnalyzerState	include/ConditionInLoopAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:ConditionInLoopAnalyzer	access:public	signature:()
ConditionInLoopAnalyzer::finishAnalyze	ConditionInLoopAnalyzer.cpp	/^ConditionInLoopAnalyzer::finishAnalyze(){$/;"	f	class:ConditionInLoopAnalyzer	signature:()
ConditionInLoopAnalyzer::finishAnalyze	include/ConditionInLoopAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:ConditionInLoopAnalyzer	access:public	signature:()
ConditionInLoopAnalyzer::startAnalyze	ConditionInLoopAnalyzer.cpp	/^ConditionInLoopAnalyzer::startAnalyze(){$/;"	f	class:ConditionInLoopAnalyzer	signature:()
ConditionInLoopAnalyzer::startAnalyze	include/ConditionInLoopAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:ConditionInLoopAnalyzer	access:public	signature:()
ConditionInLoopAnalyzer::~ConditionInLoopAnalyzer	ConditionInLoopAnalyzer.cpp	/^ConditionInLoopAnalyzer::~ConditionInLoopAnalyzer(){$/;"	f	class:ConditionInLoopAnalyzer	signature:()
ConditionInLoopAnalyzer::~ConditionInLoopAnalyzer	include/ConditionInLoopAnalyzer.h	/^	virtual ~ConditionInLoopAnalyzer();$/;"	p	class:ConditionInLoopAnalyzer	access:public	signature:()
ConditionInLoopAnalyzer_H_	include/ConditionInLoopAnalyzer.h	9;"	d
CountCodesInBindExpr	LoopDivideAnalyzer.cpp	/^int LoopDivideAnalyzer::CountCodesInBindExpr(GNode * initnode) {$/;"	f	class:LoopDivideAnalyzer	signature:(GNode * initnode)
CountCodesInBindExpr	include/LoopDivideAnalyzer.h	/^	int CountCodesInBindExpr(GNode * node);$/;"	p	class:LoopDivideAnalyzer	access:private	signature:(GNode * node)
CountCodesInCleanUpPointExpr	LoopDivideAnalyzer.cpp	/^int LoopDivideAnalyzer::CountCodesInCleanUpPointExpr(GNode * node) {$/;"	f	class:LoopDivideAnalyzer	signature:(GNode * node)
CountCodesInCleanUpPointExpr	include/LoopDivideAnalyzer.h	/^	int CountCodesInCleanUpPointExpr(GNode * node);$/;"	p	class:LoopDivideAnalyzer	access:private	signature:(GNode * node)
CountCodesInCondExpr	LoopDivideAnalyzer.cpp	/^int LoopDivideAnalyzer::CountCodesInCondExpr(GNode * node) {$/;"	f	class:LoopDivideAnalyzer	signature:(GNode * node)
CountCodesInCondExpr	include/LoopDivideAnalyzer.h	/^	int CountCodesInCondExpr(GNode * node);$/;"	p	class:LoopDivideAnalyzer	access:private	signature:(GNode * node)
CountCodesInFunCall	include/LoopDivideAnalyzer.h	/^	int CountCodesInFunCall(GNode *node);$/;"	p	class:LoopDivideAnalyzer	access:private	signature:(GNode *node)
CountCodesInLoop	LoopDivideAnalyzer.cpp	/^int LoopDivideAnalyzer::CountCodesInLoop(GNode * node) {$/;"	f	class:LoopDivideAnalyzer	signature:(GNode * node)
CountCodesInLoop	include/LoopDivideAnalyzer.h	/^	int CountCodesInLoop(GNode * node);$/;"	p	class:LoopDivideAnalyzer	access:private	signature:(GNode * node)
DIVIDE_BY_TWOS_EXPONENT_ANALYZER_H	include/DivideByTwosExponentAnalyzer.h	9;"	d
DivideByTwosExponentAnalyzer	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::DivideByTwosExponentAnalyzer()$/;"	f	class:DivideByTwosExponentAnalyzer	signature:()
DivideByTwosExponentAnalyzer	include/DivideByTwosExponentAnalyzer.h	/^	DivideByTwosExponentAnalyzer();$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:()
DivideByTwosExponentAnalyzer	include/DivideByTwosExponentAnalyzer.h	/^class DivideByTwosExponentAnalyzer : public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
DivideByTwosExponentAnalyzer::DivideByTwosExponentAnalyzer	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::DivideByTwosExponentAnalyzer()$/;"	f	class:DivideByTwosExponentAnalyzer	signature:()
DivideByTwosExponentAnalyzer::DivideByTwosExponentAnalyzer	include/DivideByTwosExponentAnalyzer.h	/^	DivideByTwosExponentAnalyzer();$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:()
DivideByTwosExponentAnalyzer::analyzeNode	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:DivideByTwosExponentAnalyzer	signature:(GNode* node,const vector<int>& context)
DivideByTwosExponentAnalyzer::analyzeNode	include/DivideByTwosExponentAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:(GNode*,const vector<int>&)
DivideByTwosExponentAnalyzer::clearAnalyzerState	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::clearAnalyzerState()$/;"	f	class:DivideByTwosExponentAnalyzer	signature:()
DivideByTwosExponentAnalyzer::clearAnalyzerState	include/DivideByTwosExponentAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:()
DivideByTwosExponentAnalyzer::finishAnalyze	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::finishAnalyze()$/;"	f	class:DivideByTwosExponentAnalyzer	signature:()
DivideByTwosExponentAnalyzer::finishAnalyze	include/DivideByTwosExponentAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:()
DivideByTwosExponentAnalyzer::ifTwosExponent	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::ifTwosExponent(int value)$/;"	f	class:DivideByTwosExponentAnalyzer	signature:(int value)
DivideByTwosExponentAnalyzer::ifTwosExponent	include/DivideByTwosExponentAnalyzer.h	/^	bool ifTwosExponent(int);$/;"	p	class:DivideByTwosExponentAnalyzer	access:private	signature:(int)
DivideByTwosExponentAnalyzer::startAnalyze	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::startAnalyze()$/;"	f	class:DivideByTwosExponentAnalyzer	signature:()
DivideByTwosExponentAnalyzer::startAnalyze	include/DivideByTwosExponentAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:()
DivideByTwosExponentAnalyzer::~DivideByTwosExponentAnalyzer	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::~DivideByTwosExponentAnalyzer()$/;"	f	class:DivideByTwosExponentAnalyzer	signature:()
DivideByTwosExponentAnalyzer::~DivideByTwosExponentAnalyzer	include/DivideByTwosExponentAnalyzer.h	/^	virtual ~DivideByTwosExponentAnalyzer();$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:()
FINDSAMEFUNCTIONANALYZER_H_	include/FindSameFunctionAnalyzer.h	9;"	d
FOR_LOOP_COMBINE_ANALYZER_H	include/ForLoopCombineAnalyzer.h	6;"	d
FOR_LOOP_TO_ZERO_ANALYZER_H	include/ForLoopToZeroAnalyzer.h	6;"	d
FUNCTIONASLOOPVARANALYZER_H_	include/FunctionAsLoopVarAnalyzer.h	9;"	d
FUNCTIONCALLANALYZER_H_	include/FunctionCallAnalyzer.h	9;"	d
FUNCTIONCODESIZEANALYZER_H_	include/FunctionCodeSizeAnalyzer.h	9;"	d
FindSameFunctionAnalyzer	FindSameFunctionAnalyzer.cpp	/^FindSameFunctionAnalyzer::FindSameFunctionAnalyzer() {$/;"	f	class:FindSameFunctionAnalyzer	signature:()
FindSameFunctionAnalyzer	include/FindSameFunctionAnalyzer.h	/^	 FindSameFunctionAnalyzer();$/;"	p	class:FindSameFunctionAnalyzer	access:private	signature:()
FindSameFunctionAnalyzer	include/FindSameFunctionAnalyzer.h	/^class FindSameFunctionAnalyzer$/;"	c
FindSameFunctionAnalyzer::FindSameFunctionAnalyzer	FindSameFunctionAnalyzer.cpp	/^FindSameFunctionAnalyzer::FindSameFunctionAnalyzer() {$/;"	f	class:FindSameFunctionAnalyzer	signature:()
FindSameFunctionAnalyzer::FindSameFunctionAnalyzer	include/FindSameFunctionAnalyzer.h	/^	 FindSameFunctionAnalyzer();$/;"	p	class:FindSameFunctionAnalyzer	access:private	signature:()
FindSameFunctionAnalyzer::getInstance	FindSameFunctionAnalyzer.cpp	/^FindSameFunctionAnalyzer::getInstance()$/;"	f	class:FindSameFunctionAnalyzer	signature:()
FindSameFunctionAnalyzer::getInstance	include/FindSameFunctionAnalyzer.h	/^	static FindSameFunctionAnalyzer& getInstance();$/;"	p	class:FindSameFunctionAnalyzer	access:public	signature:()
FindSameFunctionAnalyzer::globalAnalyze	FindSameFunctionAnalyzer.cpp	/^FindSameFunctionAnalyzer::globalAnalyze(unsigned int hashCode, string function){$/;"	f	class:FindSameFunctionAnalyzer	signature:(unsigned int hashCode, string function)
FindSameFunctionAnalyzer::globalAnalyze	include/FindSameFunctionAnalyzer.h	/^  void globalAnalyze(unsigned int hashCode, string function);$/;"	p	class:FindSameFunctionAnalyzer	access:public	signature:(unsigned int hashCode, string function)
FindSameFunctionAnalyzer::mFindSameFunctionAnalyzer	include/FindSameFunctionAnalyzer.h	/^	 static FindSameFunctionAnalyzer *mFindSameFunctionAnalyzer;$/;"	m	class:FindSameFunctionAnalyzer	access:private
FindSameFunctionAnalyzer::mfunctionHashMap	include/FindSameFunctionAnalyzer.h	/^	 map <unsigned int , string > mfunctionHashMap;$/;"	m	class:FindSameFunctionAnalyzer	access:private
FindSameFunctionAnalyzer::~FindSameFunctionAnalyzer	FindSameFunctionAnalyzer.cpp	/^FindSameFunctionAnalyzer::~FindSameFunctionAnalyzer() {$/;"	f	class:FindSameFunctionAnalyzer	signature:()
FindSameFunctionAnalyzer::~FindSameFunctionAnalyzer	include/FindSameFunctionAnalyzer.h	/^	 ~FindSameFunctionAnalyzer();$/;"	p	class:FindSameFunctionAnalyzer	access:private	signature:()
ForLoopCombineAnalyzer	ForLoopCombineAnalyzer.cpp	/^ForLoopCombineAnalyzer::ForLoopCombineAnalyzer(){$/;"	f	class:ForLoopCombineAnalyzer	signature:()
ForLoopCombineAnalyzer	include/ForLoopCombineAnalyzer.h	/^	ForLoopCombineAnalyzer();$/;"	p	class:ForLoopCombineAnalyzer	access:public	signature:()
ForLoopCombineAnalyzer	include/ForLoopCombineAnalyzer.h	/^class ForLoopCombineAnalyzer : public BaseAnalyzer{$/;"	c	inherits:BaseAnalyzer
ForLoopCombineAnalyzer::ForLoopCombineAnalyzer	ForLoopCombineAnalyzer.cpp	/^ForLoopCombineAnalyzer::ForLoopCombineAnalyzer(){$/;"	f	class:ForLoopCombineAnalyzer	signature:()
ForLoopCombineAnalyzer::ForLoopCombineAnalyzer	include/ForLoopCombineAnalyzer.h	/^	ForLoopCombineAnalyzer();$/;"	p	class:ForLoopCombineAnalyzer	access:public	signature:()
ForLoopCombineAnalyzer::analyzeNode	ForLoopCombineAnalyzer.cpp	/^void ForLoopCombineAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node, const vector< int > &context )
ForLoopCombineAnalyzer::analyzeNode	include/ForLoopCombineAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector< int > & );$/;"	p	class:ForLoopCombineAnalyzer	access:public	signature:( GNode *, const vector< int > & )
ForLoopCombineAnalyzer::checkTwoExpression	ForLoopCombineAnalyzer.cpp	/^bool ForLoopCombineAnalyzer::checkTwoExpression( GNode *node1, GNode *node2 ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node1, GNode *node2 )
ForLoopCombineAnalyzer::checkTwoExpression	include/ForLoopCombineAnalyzer.h	/^	bool checkTwoExpression( GNode *, GNode * );$/;"	p	class:ForLoopCombineAnalyzer	access:private	signature:( GNode *, GNode * )
ForLoopCombineAnalyzer::checkTwoLoop	ForLoopCombineAnalyzer.cpp	/^bool ForLoopCombineAnalyzer::checkTwoLoop( GNode *node1, GNode *node2, const vector< int > &context ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node1, GNode *node2, const vector< int > &context )
ForLoopCombineAnalyzer::checkTwoLoop	include/ForLoopCombineAnalyzer.h	/^	bool checkTwoLoop( GNode *, GNode *, const vector< int > & );$/;"	p	class:ForLoopCombineAnalyzer	access:private	signature:( GNode *, GNode *, const vector< int > & )
ForLoopCombineAnalyzer::checkTwoLoopCond	ForLoopCombineAnalyzer.cpp	/^bool ForLoopCombineAnalyzer::checkTwoLoopCond( GNode *node1, GNode *node2 ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node1, GNode *node2 )
ForLoopCombineAnalyzer::checkTwoLoopCond	include/ForLoopCombineAnalyzer.h	/^	bool checkTwoLoopCond( GNode *, GNode * );$/;"	p	class:ForLoopCombineAnalyzer	access:private	signature:( GNode *, GNode * )
ForLoopCombineAnalyzer::checkTwoLoopExpr	ForLoopCombineAnalyzer.cpp	/^bool ForLoopCombineAnalyzer::checkTwoLoopExpr( GNode *node1, GNode *node2 ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node1, GNode *node2 )
ForLoopCombineAnalyzer::checkTwoLoopExpr	include/ForLoopCombineAnalyzer.h	/^	bool checkTwoLoopExpr( GNode *, GNode * );$/;"	p	class:ForLoopCombineAnalyzer	access:private	signature:( GNode *, GNode * )
ForLoopCombineAnalyzer::checkTwoLoopInit	ForLoopCombineAnalyzer.cpp	/^bool ForLoopCombineAnalyzer::checkTwoLoopInit( GNode *node1, GNode *node2 ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node1, GNode *node2 )
ForLoopCombineAnalyzer::checkTwoLoopInit	include/ForLoopCombineAnalyzer.h	/^	bool checkTwoLoopInit( GNode *, GNode * );$/;"	p	class:ForLoopCombineAnalyzer	access:private	signature:( GNode *, GNode * )
ForLoopCombineAnalyzer::clearAnalyzerState	include/ForLoopCombineAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:ForLoopCombineAnalyzer	access:public	signature:()
ForLoopCombineAnalyzer::finishAnalyze	ForLoopCombineAnalyzer.cpp	/^void ForLoopCombineAnalyzer::finishAnalyze(){$/;"	f	class:ForLoopCombineAnalyzer	signature:()
ForLoopCombineAnalyzer::finishAnalyze	include/ForLoopCombineAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:ForLoopCombineAnalyzer	access:public	signature:()
ForLoopCombineAnalyzer::startAnalyze	ForLoopCombineAnalyzer.cpp	/^void ForLoopCombineAnalyzer::startAnalyze(){$/;"	f	class:ForLoopCombineAnalyzer	signature:()
ForLoopCombineAnalyzer::startAnalyze	include/ForLoopCombineAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:ForLoopCombineAnalyzer	access:public	signature:()
ForLoopCombineAnalyzer::~ForLoopCombineAnalyzer	ForLoopCombineAnalyzer.cpp	/^ForLoopCombineAnalyzer::~ForLoopCombineAnalyzer(){$/;"	f	class:ForLoopCombineAnalyzer	signature:()
ForLoopCombineAnalyzer::~ForLoopCombineAnalyzer	include/ForLoopCombineAnalyzer.h	/^	virtual ~ForLoopCombineAnalyzer();$/;"	p	class:ForLoopCombineAnalyzer	access:public	signature:()
ForLoopToZeroAnalyzer	ForLoopToZeroAnalyzer.cpp	/^ForLoopToZeroAnalyzer::ForLoopToZeroAnalyzer(){$/;"	f	class:ForLoopToZeroAnalyzer	signature:()
ForLoopToZeroAnalyzer	include/ForLoopToZeroAnalyzer.h	/^	ForLoopToZeroAnalyzer();$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:()
ForLoopToZeroAnalyzer	include/ForLoopToZeroAnalyzer.h	/^class ForLoopToZeroAnalyzer : public BaseAnalyzer{$/;"	c	inherits:BaseAnalyzer
ForLoopToZeroAnalyzer::ForLoopToZeroAnalyzer	ForLoopToZeroAnalyzer.cpp	/^ForLoopToZeroAnalyzer::ForLoopToZeroAnalyzer(){$/;"	f	class:ForLoopToZeroAnalyzer	signature:()
ForLoopToZeroAnalyzer::ForLoopToZeroAnalyzer	include/ForLoopToZeroAnalyzer.h	/^	ForLoopToZeroAnalyzer();$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:()
ForLoopToZeroAnalyzer::analyzeNode	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:ForLoopToZeroAnalyzer	signature:( GNode *node, const vector< int > &context )
ForLoopToZeroAnalyzer::analyzeNode	include/ForLoopToZeroAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector< int > & );$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:( GNode *, const vector< int > & )
ForLoopToZeroAnalyzer::checkInitStmt	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::checkInitStmt( GNode *node, const vector< int > &context ){$/;"	f	class:ForLoopToZeroAnalyzer	signature:( GNode *node, const vector< int > &context )
ForLoopToZeroAnalyzer::checkInitStmt	include/ForLoopToZeroAnalyzer.h	/^	void checkInitStmt( GNode *, const vector< int > & );$/;"	p	class:ForLoopToZeroAnalyzer	access:private	signature:( GNode *, const vector< int > & )
ForLoopToZeroAnalyzer::clearAnalyzerState	ForLoopToZeroAnalyzer.cpp	/^ForLoopToZeroAnalyzer::clearAnalyzerState(){$/;"	f	class:ForLoopToZeroAnalyzer	signature:()
ForLoopToZeroAnalyzer::clearAnalyzerState	include/ForLoopToZeroAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:()
ForLoopToZeroAnalyzer::condVarVec	include/ForLoopToZeroAnalyzer.h	/^	vector< string > condVarVec, iterVarVec;$/;"	m	class:ForLoopToZeroAnalyzer	access:private
ForLoopToZeroAnalyzer::findIterWithExpr	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::findIterWithExpr( GNode *node ){$/;"	f	class:ForLoopToZeroAnalyzer	signature:( GNode *node )
ForLoopToZeroAnalyzer::findIterWithExpr	include/ForLoopToZeroAnalyzer.h	/^	void findIterWithExpr( GNode * );$/;"	p	class:ForLoopToZeroAnalyzer	access:private	signature:( GNode * )
ForLoopToZeroAnalyzer::findVarInCond	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::findVarInCond( GNode *node ){$/;"	f	class:ForLoopToZeroAnalyzer	signature:( GNode *node )
ForLoopToZeroAnalyzer::findVarInCond	include/ForLoopToZeroAnalyzer.h	/^	void findVarInCond( GNode * ); $/;"	p	class:ForLoopToZeroAnalyzer	access:private	signature:( GNode * )
ForLoopToZeroAnalyzer::finishAnalyze	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::finishAnalyze(){$/;"	f	class:ForLoopToZeroAnalyzer	signature:()
ForLoopToZeroAnalyzer::finishAnalyze	include/ForLoopToZeroAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:()
ForLoopToZeroAnalyzer::isStrInVector	ForLoopToZeroAnalyzer.cpp	/^bool ForLoopToZeroAnalyzer::isStrInVector( string &str, vector< string > &vec ){$/;"	f	class:ForLoopToZeroAnalyzer	signature:( string &str, vector< string > &vec )
ForLoopToZeroAnalyzer::isStrInVector	include/ForLoopToZeroAnalyzer.h	/^	bool isStrInVector( string &, vector< string > & );$/;"	p	class:ForLoopToZeroAnalyzer	access:private	signature:( string &, vector< string > & )
ForLoopToZeroAnalyzer::iterVarVec	include/ForLoopToZeroAnalyzer.h	/^	vector< string > condVarVec, iterVarVec;$/;"	m	class:ForLoopToZeroAnalyzer	access:private
ForLoopToZeroAnalyzer::startAnalyze	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::startAnalyze(){$/;"	f	class:ForLoopToZeroAnalyzer	signature:()
ForLoopToZeroAnalyzer::startAnalyze	include/ForLoopToZeroAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:()
ForLoopToZeroAnalyzer::stmtNode	include/ForLoopToZeroAnalyzer.h	/^	GNode *stmtNode;$/;"	m	class:ForLoopToZeroAnalyzer	access:private
ForLoopToZeroAnalyzer::~ForLoopToZeroAnalyzer	ForLoopToZeroAnalyzer.cpp	/^ForLoopToZeroAnalyzer::~ForLoopToZeroAnalyzer(){$/;"	f	class:ForLoopToZeroAnalyzer	signature:()
ForLoopToZeroAnalyzer::~ForLoopToZeroAnalyzer	include/ForLoopToZeroAnalyzer.h	/^	virtual ~ForLoopToZeroAnalyzer();$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:()
FunctionAsLoopVarAnalyzer	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::FunctionAsLoopVarAnalyzer()$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:()
FunctionAsLoopVarAnalyzer	include/FunctionAsLoopVarAnalyzer.h	/^	FunctionAsLoopVarAnalyzer();$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:()
FunctionAsLoopVarAnalyzer	include/FunctionAsLoopVarAnalyzer.h	/^class FunctionAsLoopVarAnalyzer : public BaseAnalyzer{$/;"	c	inherits:BaseAnalyzer
FunctionAsLoopVarAnalyzer::FunctionAsLoopVarAnalyzer	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::FunctionAsLoopVarAnalyzer()$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:()
FunctionAsLoopVarAnalyzer::FunctionAsLoopVarAnalyzer	include/FunctionAsLoopVarAnalyzer.h	/^	FunctionAsLoopVarAnalyzer();$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:()
FunctionAsLoopVarAnalyzer::analyzeNode	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:(GNode* node,const vector<int>& context)
FunctionAsLoopVarAnalyzer::analyzeNode	include/FunctionAsLoopVarAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector< int > & );$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:( GNode *, const vector< int > & )
FunctionAsLoopVarAnalyzer::clearAnalyzerState	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::clearAnalyzerState()$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:()
FunctionAsLoopVarAnalyzer::clearAnalyzerState	include/FunctionAsLoopVarAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:()
FunctionAsLoopVarAnalyzer::finishAnalyze	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::finishAnalyze()$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:()
FunctionAsLoopVarAnalyzer::finishAnalyze	include/FunctionAsLoopVarAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:()
FunctionAsLoopVarAnalyzer::startAnalyze	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::startAnalyze()$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:()
FunctionAsLoopVarAnalyzer::startAnalyze	include/FunctionAsLoopVarAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:()
FunctionAsLoopVarAnalyzer::~FunctionAsLoopVarAnalyzer	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::~FunctionAsLoopVarAnalyzer()$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:()
FunctionAsLoopVarAnalyzer::~FunctionAsLoopVarAnalyzer	include/FunctionAsLoopVarAnalyzer.h	/^	virtual ~FunctionAsLoopVarAnalyzer();$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:()
FunctionCallAnalyzer	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::FunctionCallAnalyzer()$/;"	f	class:FunctionCallAnalyzer	signature:()
FunctionCallAnalyzer	include/FunctionCallAnalyzer.h	/^	FunctionCallAnalyzer();$/;"	p	class:FunctionCallAnalyzer	access:public	signature:()
FunctionCallAnalyzer	include/FunctionCallAnalyzer.h	/^class FunctionCallAnalyzer : public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
FunctionCallAnalyzer::FunctionCallAnalyzer	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::FunctionCallAnalyzer()$/;"	f	class:FunctionCallAnalyzer	signature:()
FunctionCallAnalyzer::FunctionCallAnalyzer	include/FunctionCallAnalyzer.h	/^	FunctionCallAnalyzer();$/;"	p	class:FunctionCallAnalyzer	access:public	signature:()
FunctionCallAnalyzer::analyzeNode	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:FunctionCallAnalyzer	signature:(GNode* node,const vector<int>& context)
FunctionCallAnalyzer::analyzeNode	include/FunctionCallAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:FunctionCallAnalyzer	access:public	signature:(GNode*,const vector<int>&)
FunctionCallAnalyzer::clearAnalyzerState	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::clearAnalyzerState()$/;"	f	class:FunctionCallAnalyzer	signature:()
FunctionCallAnalyzer::clearAnalyzerState	include/FunctionCallAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:FunctionCallAnalyzer	access:public	signature:()
FunctionCallAnalyzer::finishAnalyze	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::finishAnalyze()$/;"	f	class:FunctionCallAnalyzer	signature:()
FunctionCallAnalyzer::finishAnalyze	include/FunctionCallAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:FunctionCallAnalyzer	access:public	signature:()
FunctionCallAnalyzer::isConditionFunction	FunctionCallAnalyzer.cpp	/^bool FunctionCallAnalyzer::isConditionFunction(GTree* tree)$/;"	f	class:FunctionCallAnalyzer	signature:(GTree* tree)
FunctionCallAnalyzer::isConditionFunction	include/FunctionCallAnalyzer.h	/^	bool isConditionFunction(GTree* tree);$/;"	p	class:FunctionCallAnalyzer	access:private	signature:(GTree* tree)
FunctionCallAnalyzer::startAnalyze	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::startAnalyze()$/;"	f	class:FunctionCallAnalyzer	signature:()
FunctionCallAnalyzer::startAnalyze	include/FunctionCallAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:FunctionCallAnalyzer	access:public	signature:()
FunctionCallAnalyzer::~FunctionCallAnalyzer	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::~FunctionCallAnalyzer()$/;"	f	class:FunctionCallAnalyzer	signature:()
FunctionCallAnalyzer::~FunctionCallAnalyzer	include/FunctionCallAnalyzer.h	/^	virtual ~FunctionCallAnalyzer();$/;"	p	class:FunctionCallAnalyzer	access:public	signature:()
FunctionCodeSizeAnalyzer	FunctionCodeSizeAnalyzer.cpp	/^FunctionCodeSizeAnalyzer::FunctionCodeSizeAnalyzer() {$/;"	f	class:FunctionCodeSizeAnalyzer	signature:()
FunctionCodeSizeAnalyzer	include/FunctionCodeSizeAnalyzer.h	/^	FunctionCodeSizeAnalyzer();$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:()
FunctionCodeSizeAnalyzer	include/FunctionCodeSizeAnalyzer.h	/^class FunctionCodeSizeAnalyzer: public BaseAnalyzer {$/;"	c	inherits:BaseAnalyzer
FunctionCodeSizeAnalyzer::FunctionCodeSizeAnalyzer	FunctionCodeSizeAnalyzer.cpp	/^FunctionCodeSizeAnalyzer::FunctionCodeSizeAnalyzer() {$/;"	f	class:FunctionCodeSizeAnalyzer	signature:()
FunctionCodeSizeAnalyzer::FunctionCodeSizeAnalyzer	include/FunctionCodeSizeAnalyzer.h	/^	FunctionCodeSizeAnalyzer();$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:()
FunctionCodeSizeAnalyzer::analyzeNode	FunctionCodeSizeAnalyzer.cpp	/^void FunctionCodeSizeAnalyzer::analyzeNode(GNode *node,$/;"	f	class:FunctionCodeSizeAnalyzer	signature:(GNode *node, const vector<int> &context)
FunctionCodeSizeAnalyzer::analyzeNode	include/FunctionCodeSizeAnalyzer.h	/^	virtual void analyzeNode(GNode *, const vector<int> &);$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:(GNode *, const vector<int> &)
FunctionCodeSizeAnalyzer::clearAnalyzerState	FunctionCodeSizeAnalyzer.cpp	/^void FunctionCodeSizeAnalyzer::clearAnalyzerState(){$/;"	f	class:FunctionCodeSizeAnalyzer	signature:()
FunctionCodeSizeAnalyzer::clearAnalyzerState	include/FunctionCodeSizeAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:()
FunctionCodeSizeAnalyzer::codeSize	include/FunctionCodeSizeAnalyzer.h	/^	int codeSize;$/;"	m	class:FunctionCodeSizeAnalyzer	access:private
FunctionCodeSizeAnalyzer::finishAnalyze	FunctionCodeSizeAnalyzer.cpp	/^void FunctionCodeSizeAnalyzer::finishAnalyze() {$/;"	f	class:FunctionCodeSizeAnalyzer	signature:()
FunctionCodeSizeAnalyzer::finishAnalyze	include/FunctionCodeSizeAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:()
FunctionCodeSizeAnalyzer::fun_decl_line_num	include/FunctionCodeSizeAnalyzer.h	/^	int fun_decl_line_num;$/;"	m	class:FunctionCodeSizeAnalyzer	access:private
FunctionCodeSizeAnalyzer::function_name	include/FunctionCodeSizeAnalyzer.h	/^	string function_name;$/;"	m	class:FunctionCodeSizeAnalyzer	access:private
FunctionCodeSizeAnalyzer::printed	include/FunctionCodeSizeAnalyzer.h	/^	bool printed;$/;"	m	class:FunctionCodeSizeAnalyzer	access:private
FunctionCodeSizeAnalyzer::startAnalyze	FunctionCodeSizeAnalyzer.cpp	/^void FunctionCodeSizeAnalyzer::startAnalyze() {$/;"	f	class:FunctionCodeSizeAnalyzer	signature:()
FunctionCodeSizeAnalyzer::startAnalyze	include/FunctionCodeSizeAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:()
FunctionCodeSizeAnalyzer::threshold	include/FunctionCodeSizeAnalyzer.h	/^	int threshold;$/;"	m	class:FunctionCodeSizeAnalyzer	access:private
FunctionCodeSizeAnalyzer::~FunctionCodeSizeAnalyzer	FunctionCodeSizeAnalyzer.cpp	/^FunctionCodeSizeAnalyzer::~FunctionCodeSizeAnalyzer() {$/;"	f	class:FunctionCodeSizeAnalyzer	signature:()
FunctionCodeSizeAnalyzer::~FunctionCodeSizeAnalyzer	include/FunctionCodeSizeAnalyzer.h	/^	virtual ~FunctionCodeSizeAnalyzer();$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:()
GEANDLECONDANALYZER_H	include/GeAndLeCondAnalyzer.h	7;"	d
GLOBAL_VAR_SIZE_ANALYZER_H	include/GlobalVarSizeAnalyzer.h	6;"	d
GeAndLeCondAnalyzer	GeAndLeCondAnalyzer.cpp	/^GeAndLeCondAnalyzer::GeAndLeCondAnalyzer()$/;"	f	class:GeAndLeCondAnalyzer	signature:()
GeAndLeCondAnalyzer	include/GeAndLeCondAnalyzer.h	/^	GeAndLeCondAnalyzer();$/;"	p	class:GeAndLeCondAnalyzer	access:public	signature:()
GeAndLeCondAnalyzer	include/GeAndLeCondAnalyzer.h	/^class GeAndLeCondAnalyzer: public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
GeAndLeCondAnalyzer::GeAndLeCondAnalyzer	GeAndLeCondAnalyzer.cpp	/^GeAndLeCondAnalyzer::GeAndLeCondAnalyzer()$/;"	f	class:GeAndLeCondAnalyzer	signature:()
GeAndLeCondAnalyzer::GeAndLeCondAnalyzer	include/GeAndLeCondAnalyzer.h	/^	GeAndLeCondAnalyzer();$/;"	p	class:GeAndLeCondAnalyzer	access:public	signature:()
GeAndLeCondAnalyzer::analyzeNode	GeAndLeCondAnalyzer.cpp	/^GeAndLeCondAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:GeAndLeCondAnalyzer	signature:(GNode* node,const vector<int>& context)
GeAndLeCondAnalyzer::analyzeNode	include/GeAndLeCondAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:GeAndLeCondAnalyzer	access:public	signature:(GNode*,const vector<int>&)
GeAndLeCondAnalyzer::clearAnalyzerState	include/GeAndLeCondAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:GeAndLeCondAnalyzer	access:public	signature:()
GeAndLeCondAnalyzer::finishAnalyze	GeAndLeCondAnalyzer.cpp	/^GeAndLeCondAnalyzer::finishAnalyze()$/;"	f	class:GeAndLeCondAnalyzer	signature:()
GeAndLeCondAnalyzer::finishAnalyze	include/GeAndLeCondAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:GeAndLeCondAnalyzer	access:public	signature:()
GeAndLeCondAnalyzer::startAnalyze	GeAndLeCondAnalyzer.cpp	/^GeAndLeCondAnalyzer::startAnalyze()$/;"	f	class:GeAndLeCondAnalyzer	signature:()
GeAndLeCondAnalyzer::startAnalyze	include/GeAndLeCondAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:GeAndLeCondAnalyzer	access:public	signature:()
GeAndLeCondAnalyzer::~GeAndLeCondAnalyzer	GeAndLeCondAnalyzer.cpp	/^GeAndLeCondAnalyzer::~GeAndLeCondAnalyzer()$/;"	f	class:GeAndLeCondAnalyzer	signature:()
GeAndLeCondAnalyzer::~GeAndLeCondAnalyzer	include/GeAndLeCondAnalyzer.h	/^	virtual ~GeAndLeCondAnalyzer();$/;"	p	class:GeAndLeCondAnalyzer	access:public	signature:()
GlobalVarSizeAnalyzer	GlobalVarSizeAnalyzer.cpp	/^GlobalVarSizeAnalyzer::GlobalVarSizeAnalyzer(){$/;"	f	class:GlobalVarSizeAnalyzer	signature:()
GlobalVarSizeAnalyzer	include/GlobalVarSizeAnalyzer.h	/^	GlobalVarSizeAnalyzer();$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:()
GlobalVarSizeAnalyzer	include/GlobalVarSizeAnalyzer.h	/^class GlobalVarSizeAnalyzer : public BaseAnalyzer{$/;"	c	inherits:BaseAnalyzer
GlobalVarSizeAnalyzer::GlobalVarSizeAnalyzer	GlobalVarSizeAnalyzer.cpp	/^GlobalVarSizeAnalyzer::GlobalVarSizeAnalyzer(){$/;"	f	class:GlobalVarSizeAnalyzer	signature:()
GlobalVarSizeAnalyzer::GlobalVarSizeAnalyzer	include/GlobalVarSizeAnalyzer.h	/^	GlobalVarSizeAnalyzer();$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:()
GlobalVarSizeAnalyzer::analyzeNode	GlobalVarSizeAnalyzer.cpp	/^void GlobalVarSizeAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:GlobalVarSizeAnalyzer	signature:( GNode *node, const vector< int > &context )
GlobalVarSizeAnalyzer::analyzeNode	include/GlobalVarSizeAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector< int > & );$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:( GNode *, const vector< int > & )
GlobalVarSizeAnalyzer::clearAnalyzerState	GlobalVarSizeAnalyzer.cpp	/^void GlobalVarSizeAnalyzer::clearAnalyzerState(){$/;"	f	class:GlobalVarSizeAnalyzer	signature:()
GlobalVarSizeAnalyzer::clearAnalyzerState	include/GlobalVarSizeAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:()
GlobalVarSizeAnalyzer::codeLocation	include/GlobalVarSizeAnalyzer.h	/^	unsigned long totalGlobalVarSize, codeLocation;$/;"	m	class:GlobalVarSizeAnalyzer	access:private
GlobalVarSizeAnalyzer::finishAnalyze	GlobalVarSizeAnalyzer.cpp	/^void GlobalVarSizeAnalyzer::finishAnalyze(){$/;"	f	class:GlobalVarSizeAnalyzer	signature:()
GlobalVarSizeAnalyzer::finishAnalyze	include/GlobalVarSizeAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:()
GlobalVarSizeAnalyzer::globalVarMap	include/GlobalVarSizeAnalyzer.h	/^	std::map<string, int> globalVarMap;$/;"	m	class:GlobalVarSizeAnalyzer	access:private
GlobalVarSizeAnalyzer::startAnalyze	GlobalVarSizeAnalyzer.cpp	/^void GlobalVarSizeAnalyzer::startAnalyze(){$/;"	f	class:GlobalVarSizeAnalyzer	signature:()
GlobalVarSizeAnalyzer::startAnalyze	include/GlobalVarSizeAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:()
GlobalVarSizeAnalyzer::totalGlobalVarSize	include/GlobalVarSizeAnalyzer.h	/^	unsigned long totalGlobalVarSize, codeLocation;$/;"	m	class:GlobalVarSizeAnalyzer	access:private
GlobalVarSizeAnalyzer::~GlobalVarSizeAnalyzer	GlobalVarSizeAnalyzer.cpp	/^GlobalVarSizeAnalyzer::~GlobalVarSizeAnalyzer(){$/;"	f	class:GlobalVarSizeAnalyzer	signature:()
GlobalVarSizeAnalyzer::~GlobalVarSizeAnalyzer	include/GlobalVarSizeAnalyzer.h	/^	virtual ~GlobalVarSizeAnalyzer();$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:()
IFTOSWITCHANALYZER_H_	include/IfToSwitchAnalyzer.h	9;"	d
INITIALIZE_ARRAY_BY_FOR_LOOP_ANALYZER_H	include/InitializeArrayByForLoopAnalyzer.h	9;"	d
IfToSwitchAnalyzer	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::IfToSwitchAnalyzer(){$/;"	f	class:IfToSwitchAnalyzer	signature:()
IfToSwitchAnalyzer	include/IfToSwitchAnalyzer.h	/^	IfToSwitchAnalyzer();$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:()
IfToSwitchAnalyzer	include/IfToSwitchAnalyzer.h	/^class IfToSwitchAnalyzer : public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
IfToSwitchAnalyzer::IfToSwitchAnalyzer	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::IfToSwitchAnalyzer(){$/;"	f	class:IfToSwitchAnalyzer	signature:()
IfToSwitchAnalyzer::IfToSwitchAnalyzer	include/IfToSwitchAnalyzer.h	/^	IfToSwitchAnalyzer();$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:()
IfToSwitchAnalyzer::analyzeNode	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::analyzeNode(GNode* node,const vector<int>& context){$/;"	f	class:IfToSwitchAnalyzer	signature:(GNode* node,const vector<int>& context)
IfToSwitchAnalyzer::analyzeNode	include/IfToSwitchAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:(GNode*,const vector<int>&)
IfToSwitchAnalyzer::clearAnalyzerState	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::clearAnalyzerState(){$/;"	f	class:IfToSwitchAnalyzer	signature:()
IfToSwitchAnalyzer::clearAnalyzerState	include/IfToSwitchAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:()
IfToSwitchAnalyzer::conditionNode	include/IfToSwitchAnalyzer.h	/^	struct conditionNode{$/;"	s	class:IfToSwitchAnalyzer	access:public
IfToSwitchAnalyzer::conditionNode::father	include/IfToSwitchAnalyzer.h	/^		int father;$/;"	m	struct:IfToSwitchAnalyzer::conditionNode	access:public
IfToSwitchAnalyzer::conditionNode::iContextLine	include/IfToSwitchAnalyzer.h	/^		int iContextLine;$/;"	m	struct:IfToSwitchAnalyzer::conditionNode	access:public
IfToSwitchAnalyzer::conditionNode::node	include/IfToSwitchAnalyzer.h	/^		GNode* node;$/;"	m	struct:IfToSwitchAnalyzer::conditionNode	access:public
IfToSwitchAnalyzer::conditionNode::varId	include/IfToSwitchAnalyzer.h	/^		int varId;$/;"	m	struct:IfToSwitchAnalyzer::conditionNode	access:public
IfToSwitchAnalyzer::finishAnalyze	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::finishAnalyze(){$/;"	f	class:IfToSwitchAnalyzer	signature:()
IfToSwitchAnalyzer::finishAnalyze	include/IfToSwitchAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:()
IfToSwitchAnalyzer::getVarIDOrder	IfToSwitchAnalyzer.cpp	/^bool IfToSwitchAnalyzer::getVarIDOrder(conditionNode a, conditionNode b){$/;"	f	class:IfToSwitchAnalyzer	signature:(conditionNode a, conditionNode b)
IfToSwitchAnalyzer::getVarIDOrder	include/IfToSwitchAnalyzer.h	/^	static bool getVarIDOrder(conditionNode a, conditionNode b);$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:(conditionNode a, conditionNode b)
IfToSwitchAnalyzer::isIfToSwitch	IfToSwitchAnalyzer.cpp	/^void IfToSwitchAnalyzer::isIfToSwitch(const vector<int>& conSet){$/;"	f	class:IfToSwitchAnalyzer	signature:(const vector<int>& conSet)
IfToSwitchAnalyzer::isIfToSwitch	include/IfToSwitchAnalyzer.h	/^	void isIfToSwitch(const vector<int>&);$/;"	p	class:IfToSwitchAnalyzer	access:private	signature:(const vector<int>&)
IfToSwitchAnalyzer::mConditionNodeVector	include/IfToSwitchAnalyzer.h	/^	vector< conditionNode > mConditionNodeVector;$/;"	m	class:IfToSwitchAnalyzer	access:private
IfToSwitchAnalyzer::mContextArray	include/IfToSwitchAnalyzer.h	/^	vector<vector<int> > mContextArray;$/;"	m	class:IfToSwitchAnalyzer	access:private
IfToSwitchAnalyzer::startAnalyze	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::startAnalyze(){$/;"	f	class:IfToSwitchAnalyzer	signature:()
IfToSwitchAnalyzer::startAnalyze	include/IfToSwitchAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:()
IfToSwitchAnalyzer::~IfToSwitchAnalyzer	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::~IfToSwitchAnalyzer(){$/;"	f	class:IfToSwitchAnalyzer	signature:()
IfToSwitchAnalyzer::~IfToSwitchAnalyzer	include/IfToSwitchAnalyzer.h	/^	virtual ~IfToSwitchAnalyzer();$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:()
InitializeArrayByForLoopAnalyzer	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::InitializeArrayByForLoopAnalyzer()$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:()
InitializeArrayByForLoopAnalyzer	include/InitializeArrayByForLoopAnalyzer.h	/^	InitializeArrayByForLoopAnalyzer();$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:()
InitializeArrayByForLoopAnalyzer	include/InitializeArrayByForLoopAnalyzer.h	/^class InitializeArrayByForLoopAnalyzer : public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
InitializeArrayByForLoopAnalyzer::InitializeArrayByForLoopAnalyzer	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::InitializeArrayByForLoopAnalyzer()$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:()
InitializeArrayByForLoopAnalyzer::InitializeArrayByForLoopAnalyzer	include/InitializeArrayByForLoopAnalyzer.h	/^	InitializeArrayByForLoopAnalyzer();$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:()
InitializeArrayByForLoopAnalyzer::analyzeNode	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:(GNode* node,const vector<int>& context)
InitializeArrayByForLoopAnalyzer::analyzeNode	include/InitializeArrayByForLoopAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:(GNode*,const vector<int>&)
InitializeArrayByForLoopAnalyzer::clearAnalyzerState	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::clearAnalyzerState()$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:()
InitializeArrayByForLoopAnalyzer::clearAnalyzerState	include/InitializeArrayByForLoopAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:()
InitializeArrayByForLoopAnalyzer::finishAnalyze	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::finishAnalyze()$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:()
InitializeArrayByForLoopAnalyzer::finishAnalyze	include/InitializeArrayByForLoopAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:()
InitializeArrayByForLoopAnalyzer::startAnalyze	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::startAnalyze()$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:()
InitializeArrayByForLoopAnalyzer::startAnalyze	include/InitializeArrayByForLoopAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:()
InitializeArrayByForLoopAnalyzer::~InitializeArrayByForLoopAnalyzer	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::~InitializeArrayByForLoopAnalyzer()$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:()
InitializeArrayByForLoopAnalyzer::~InitializeArrayByForLoopAnalyzer	include/InitializeArrayByForLoopAnalyzer.h	/^	virtual ~InitializeArrayByForLoopAnalyzer();$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:()
LOCALVARSIZEANALYZER_H_	include/LocalVarSizeAnalyzer.h	9;"	d
LOOPDIVIDEANALYZER_H_	include/LoopDivideAnalyzer.h	9;"	d
LocalVarSizeAnalyzer	LocalVarSizeAnalyzer.cpp	/^LocalVarSizeAnalyzer::LocalVarSizeAnalyzer() {$/;"	f	class:LocalVarSizeAnalyzer	signature:()
LocalVarSizeAnalyzer	include/LocalVarSizeAnalyzer.h	/^	LocalVarSizeAnalyzer();$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:()
LocalVarSizeAnalyzer	include/LocalVarSizeAnalyzer.h	/^class LocalVarSizeAnalyzer: public BaseAnalyzer {$/;"	c	inherits:BaseAnalyzer
LocalVarSizeAnalyzer::LocalVarSizeAnalyzer	LocalVarSizeAnalyzer.cpp	/^LocalVarSizeAnalyzer::LocalVarSizeAnalyzer() {$/;"	f	class:LocalVarSizeAnalyzer	signature:()
LocalVarSizeAnalyzer::LocalVarSizeAnalyzer	include/LocalVarSizeAnalyzer.h	/^	LocalVarSizeAnalyzer();$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:()
LocalVarSizeAnalyzer::analyzeNode	LocalVarSizeAnalyzer.cpp	/^void LocalVarSizeAnalyzer::analyzeNode(GNode *node,$/;"	f	class:LocalVarSizeAnalyzer	signature:(GNode *node, const vector<int> &context)
LocalVarSizeAnalyzer::analyzeNode	include/LocalVarSizeAnalyzer.h	/^	virtual void analyzeNode(GNode *, const vector<int> &);$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:(GNode *, const vector<int> &)
LocalVarSizeAnalyzer::clearAnalyzerState	LocalVarSizeAnalyzer.cpp	/^LocalVarSizeAnalyzer::clearAnalyzerState() {$/;"	f	class:LocalVarSizeAnalyzer	signature:()
LocalVarSizeAnalyzer::clearAnalyzerState	include/LocalVarSizeAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:()
LocalVarSizeAnalyzer::finishAnalyze	LocalVarSizeAnalyzer.cpp	/^void LocalVarSizeAnalyzer::finishAnalyze() {$/;"	f	class:LocalVarSizeAnalyzer	signature:()
LocalVarSizeAnalyzer::finishAnalyze	include/LocalVarSizeAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:()
LocalVarSizeAnalyzer::fun_decl_line_num	include/LocalVarSizeAnalyzer.h	/^	int fun_decl_line_num;$/;"	m	class:LocalVarSizeAnalyzer	access:private
LocalVarSizeAnalyzer::function_name	include/LocalVarSizeAnalyzer.h	/^	string function_name;$/;"	m	class:LocalVarSizeAnalyzer	access:private
LocalVarSizeAnalyzer::startAnalyze	LocalVarSizeAnalyzer.cpp	/^void LocalVarSizeAnalyzer::startAnalyze() {$/;"	f	class:LocalVarSizeAnalyzer	signature:()
LocalVarSizeAnalyzer::startAnalyze	include/LocalVarSizeAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:()
LocalVarSizeAnalyzer::threshold	include/LocalVarSizeAnalyzer.h	/^	int threshold;$/;"	m	class:LocalVarSizeAnalyzer	access:private
LocalVarSizeAnalyzer::totalLocalVarSize	include/LocalVarSizeAnalyzer.h	/^	unsigned long totalLocalVarSize;$/;"	m	class:LocalVarSizeAnalyzer	access:private
LocalVarSizeAnalyzer::~LocalVarSizeAnalyzer	LocalVarSizeAnalyzer.cpp	/^LocalVarSizeAnalyzer::~LocalVarSizeAnalyzer() {$/;"	f	class:LocalVarSizeAnalyzer	signature:()
LocalVarSizeAnalyzer::~LocalVarSizeAnalyzer	include/LocalVarSizeAnalyzer.h	/^	virtual ~LocalVarSizeAnalyzer();$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:()
LoopDivideAnalyzer	LoopDivideAnalyzer.cpp	/^LoopDivideAnalyzer::LoopDivideAnalyzer() {$/;"	f	class:LoopDivideAnalyzer	signature:()
LoopDivideAnalyzer	include/LoopDivideAnalyzer.h	/^	LoopDivideAnalyzer();$/;"	p	class:LoopDivideAnalyzer	access:public	signature:()
LoopDivideAnalyzer	include/LoopDivideAnalyzer.h	/^class LoopDivideAnalyzer: public BaseAnalyzer {$/;"	c	inherits:BaseAnalyzer
LoopDivideAnalyzer::CountCodesInBindExpr	LoopDivideAnalyzer.cpp	/^int LoopDivideAnalyzer::CountCodesInBindExpr(GNode * initnode) {$/;"	f	class:LoopDivideAnalyzer	signature:(GNode * initnode)
LoopDivideAnalyzer::CountCodesInBindExpr	include/LoopDivideAnalyzer.h	/^	int CountCodesInBindExpr(GNode * node);$/;"	p	class:LoopDivideAnalyzer	access:private	signature:(GNode * node)
LoopDivideAnalyzer::CountCodesInCleanUpPointExpr	LoopDivideAnalyzer.cpp	/^int LoopDivideAnalyzer::CountCodesInCleanUpPointExpr(GNode * node) {$/;"	f	class:LoopDivideAnalyzer	signature:(GNode * node)
LoopDivideAnalyzer::CountCodesInCleanUpPointExpr	include/LoopDivideAnalyzer.h	/^	int CountCodesInCleanUpPointExpr(GNode * node);$/;"	p	class:LoopDivideAnalyzer	access:private	signature:(GNode * node)
LoopDivideAnalyzer::CountCodesInCondExpr	LoopDivideAnalyzer.cpp	/^int LoopDivideAnalyzer::CountCodesInCondExpr(GNode * node) {$/;"	f	class:LoopDivideAnalyzer	signature:(GNode * node)
LoopDivideAnalyzer::CountCodesInCondExpr	include/LoopDivideAnalyzer.h	/^	int CountCodesInCondExpr(GNode * node);$/;"	p	class:LoopDivideAnalyzer	access:private	signature:(GNode * node)
LoopDivideAnalyzer::CountCodesInFunCall	include/LoopDivideAnalyzer.h	/^	int CountCodesInFunCall(GNode *node);$/;"	p	class:LoopDivideAnalyzer	access:private	signature:(GNode *node)
LoopDivideAnalyzer::CountCodesInLoop	LoopDivideAnalyzer.cpp	/^int LoopDivideAnalyzer::CountCodesInLoop(GNode * node) {$/;"	f	class:LoopDivideAnalyzer	signature:(GNode * node)
LoopDivideAnalyzer::CountCodesInLoop	include/LoopDivideAnalyzer.h	/^	int CountCodesInLoop(GNode * node);$/;"	p	class:LoopDivideAnalyzer	access:private	signature:(GNode * node)
LoopDivideAnalyzer::LoopDivideAnalyzer	LoopDivideAnalyzer.cpp	/^LoopDivideAnalyzer::LoopDivideAnalyzer() {$/;"	f	class:LoopDivideAnalyzer	signature:()
LoopDivideAnalyzer::LoopDivideAnalyzer	include/LoopDivideAnalyzer.h	/^	LoopDivideAnalyzer();$/;"	p	class:LoopDivideAnalyzer	access:public	signature:()
LoopDivideAnalyzer::analyzeNode	LoopDivideAnalyzer.cpp	/^void LoopDivideAnalyzer::analyzeNode(GNode *node, const vector<int> &context) {$/;"	f	class:LoopDivideAnalyzer	signature:(GNode *node, const vector<int> &context)
LoopDivideAnalyzer::analyzeNode	include/LoopDivideAnalyzer.h	/^	virtual void analyzeNode(GNode *, const vector<int> &);$/;"	p	class:LoopDivideAnalyzer	access:public	signature:(GNode *, const vector<int> &)
LoopDivideAnalyzer::clearAnalyzerState	LoopDivideAnalyzer.cpp	/^LoopDivideAnalyzer::clearAnalyzerState() {$/;"	f	class:LoopDivideAnalyzer	signature:()
LoopDivideAnalyzer::clearAnalyzerState	include/LoopDivideAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:LoopDivideAnalyzer	access:public	signature:()
LoopDivideAnalyzer::finishAnalyze	LoopDivideAnalyzer.cpp	/^void LoopDivideAnalyzer::finishAnalyze() {$/;"	f	class:LoopDivideAnalyzer	signature:()
LoopDivideAnalyzer::finishAnalyze	include/LoopDivideAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:LoopDivideAnalyzer	access:public	signature:()
LoopDivideAnalyzer::loopFactor	include/LoopDivideAnalyzer.h	/^	int loopFactor;$/;"	m	class:LoopDivideAnalyzer	access:private
LoopDivideAnalyzer::startAnalyze	LoopDivideAnalyzer.cpp	/^void LoopDivideAnalyzer::startAnalyze() {$/;"	f	class:LoopDivideAnalyzer	signature:()
LoopDivideAnalyzer::startAnalyze	include/LoopDivideAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:LoopDivideAnalyzer	access:public	signature:()
LoopDivideAnalyzer::threshold	include/LoopDivideAnalyzer.h	/^	int threshold;$/;"	m	class:LoopDivideAnalyzer	access:private
LoopDivideAnalyzer::~LoopDivideAnalyzer	LoopDivideAnalyzer.cpp	/^LoopDivideAnalyzer::~LoopDivideAnalyzer() {$/;"	f	class:LoopDivideAnalyzer	signature:()
LoopDivideAnalyzer::~LoopDivideAnalyzer	include/LoopDivideAnalyzer.h	/^	virtual ~LoopDivideAnalyzer();$/;"	p	class:LoopDivideAnalyzer	access:public	signature:()
MEM_APPLY_ANALYZER_H	include/MemApplyAnalyzer.h	3;"	d
MULTICONDITIONANALYZER_H_	include/MultiConditionAnalyzer.h	9;"	d
MULTIPLYBYTWOSEXPONENTANALYZER_H	include/MultiplyByTwosExponentAnalyzer.h	9;"	d
MemApplyAnalyzer	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::MemApplyAnalyzer(){$/;"	f	class:MemApplyAnalyzer	signature:()
MemApplyAnalyzer	include/MemApplyAnalyzer.h	/^	MemApplyAnalyzer();$/;"	p	class:MemApplyAnalyzer	access:public	signature:()
MemApplyAnalyzer	include/MemApplyAnalyzer.h	/^class MemApplyAnalyzer : public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
MemApplyAnalyzer::MemApplyAnalyzer	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::MemApplyAnalyzer(){$/;"	f	class:MemApplyAnalyzer	signature:()
MemApplyAnalyzer::MemApplyAnalyzer	include/MemApplyAnalyzer.h	/^	MemApplyAnalyzer();$/;"	p	class:MemApplyAnalyzer	access:public	signature:()
MemApplyAnalyzer::analyzeNode	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::analyzeNode(GNode* node,const vector<int>& context){$/;"	f	class:MemApplyAnalyzer	signature:(GNode* node,const vector<int>& context)
MemApplyAnalyzer::analyzeNode	include/MemApplyAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:MemApplyAnalyzer	access:public	signature:(GNode*,const vector<int>&)
MemApplyAnalyzer::clearAnalyzerState	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::clearAnalyzerState() {$/;"	f	class:MemApplyAnalyzer	signature:()
MemApplyAnalyzer::clearAnalyzerState	include/MemApplyAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:MemApplyAnalyzer	access:public	signature:()
MemApplyAnalyzer::codeLocation	include/MemApplyAnalyzer.h	/^    int codeLocation;$/;"	m	class:MemApplyAnalyzer	access:private
MemApplyAnalyzer::finishAnalyze	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::finishAnalyze(){$/;"	f	class:MemApplyAnalyzer	signature:()
MemApplyAnalyzer::finishAnalyze	include/MemApplyAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:MemApplyAnalyzer	access:public	signature:()
MemApplyAnalyzer::memApplyCallCounter	include/MemApplyAnalyzer.h	/^    int memApplyCallCounter;$/;"	m	class:MemApplyAnalyzer	access:private
MemApplyAnalyzer::startAnalyze	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::startAnalyze(){$/;"	f	class:MemApplyAnalyzer	signature:()
MemApplyAnalyzer::startAnalyze	include/MemApplyAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:MemApplyAnalyzer	access:public	signature:()
MemApplyAnalyzer::~MemApplyAnalyzer	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::~MemApplyAnalyzer(){$/;"	f	class:MemApplyAnalyzer	signature:()
MemApplyAnalyzer::~MemApplyAnalyzer	include/MemApplyAnalyzer.h	/^	virtual ~MemApplyAnalyzer();$/;"	p	class:MemApplyAnalyzer	access:public	signature:()
MultiConditionAnalyzer	MultiConditionAnalyzer.cpp	/^MultiConditionAnalyzer::MultiConditionAnalyzer() {$/;"	f	class:MultiConditionAnalyzer	signature:()
MultiConditionAnalyzer	include/MultiConditionAnalyzer.h	/^	MultiConditionAnalyzer();$/;"	p	class:MultiConditionAnalyzer	access:public	signature:()
MultiConditionAnalyzer	include/MultiConditionAnalyzer.h	/^class MultiConditionAnalyzer: public BaseAnalyzer {$/;"	c	inherits:BaseAnalyzer
MultiConditionAnalyzer::MultiConditionAnalyzer	MultiConditionAnalyzer.cpp	/^MultiConditionAnalyzer::MultiConditionAnalyzer() {$/;"	f	class:MultiConditionAnalyzer	signature:()
MultiConditionAnalyzer::MultiConditionAnalyzer	include/MultiConditionAnalyzer.h	/^	MultiConditionAnalyzer();$/;"	p	class:MultiConditionAnalyzer	access:public	signature:()
MultiConditionAnalyzer::analyzeNode	MultiConditionAnalyzer.cpp	/^void MultiConditionAnalyzer::analyzeNode(GNode *node,$/;"	f	class:MultiConditionAnalyzer	signature:(GNode *node, const vector<int> &context)
MultiConditionAnalyzer::analyzeNode	include/MultiConditionAnalyzer.h	/^	virtual void analyzeNode(GNode *, const vector<int> &);$/;"	p	class:MultiConditionAnalyzer	access:public	signature:(GNode *, const vector<int> &)
MultiConditionAnalyzer::clearAnalyzerState	MultiConditionAnalyzer.cpp	/^void MultiConditionAnalyzer::clearAnalyzerState(){$/;"	f	class:MultiConditionAnalyzer	signature:()
MultiConditionAnalyzer::clearAnalyzerState	include/MultiConditionAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:MultiConditionAnalyzer	access:public	signature:()
MultiConditionAnalyzer::finishAnalyze	MultiConditionAnalyzer.cpp	/^void MultiConditionAnalyzer::finishAnalyze() {$/;"	f	class:MultiConditionAnalyzer	signature:()
MultiConditionAnalyzer::finishAnalyze	include/MultiConditionAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:MultiConditionAnalyzer	access:public	signature:()
MultiConditionAnalyzer::startAnalyze	MultiConditionAnalyzer.cpp	/^void MultiConditionAnalyzer::startAnalyze() {$/;"	f	class:MultiConditionAnalyzer	signature:()
MultiConditionAnalyzer::startAnalyze	include/MultiConditionAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:MultiConditionAnalyzer	access:public	signature:()
MultiConditionAnalyzer::threshold	include/MultiConditionAnalyzer.h	/^	int threshold = 3;$/;"	m	class:MultiConditionAnalyzer	access:private
MultiConditionAnalyzer::truth_and_or_if_expr	include/MultiConditionAnalyzer.h	/^    int truth_and_or_if_expr(GNode * node);$/;"	p	class:MultiConditionAnalyzer	access:public	signature:(GNode * node)
MultiConditionAnalyzer::~MultiConditionAnalyzer	MultiConditionAnalyzer.cpp	/^MultiConditionAnalyzer::~MultiConditionAnalyzer() {$/;"	f	class:MultiConditionAnalyzer	signature:()
MultiConditionAnalyzer::~MultiConditionAnalyzer	include/MultiConditionAnalyzer.h	/^	virtual ~MultiConditionAnalyzer();$/;"	p	class:MultiConditionAnalyzer	access:public	signature:()
MultiplyByTwosExponentAnalyzer	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::MultiplyByTwosExponentAnalyzer()$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:()
MultiplyByTwosExponentAnalyzer	include/MultiplyByTwosExponentAnalyzer.h	/^	MultiplyByTwosExponentAnalyzer();$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:()
MultiplyByTwosExponentAnalyzer	include/MultiplyByTwosExponentAnalyzer.h	/^class MultiplyByTwosExponentAnalyzer: public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
MultiplyByTwosExponentAnalyzer::MultiplyByTwosExponentAnalyzer	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::MultiplyByTwosExponentAnalyzer()$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:()
MultiplyByTwosExponentAnalyzer::MultiplyByTwosExponentAnalyzer	include/MultiplyByTwosExponentAnalyzer.h	/^	MultiplyByTwosExponentAnalyzer();$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:()
MultiplyByTwosExponentAnalyzer::analyzeNode	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:(GNode* node,const vector<int>& context)
MultiplyByTwosExponentAnalyzer::analyzeNode	include/MultiplyByTwosExponentAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:(GNode*,const vector<int>&)
MultiplyByTwosExponentAnalyzer::clearAnalyzerState	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::clearAnalyzerState()$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:()
MultiplyByTwosExponentAnalyzer::clearAnalyzerState	include/MultiplyByTwosExponentAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:()
MultiplyByTwosExponentAnalyzer::finishAnalyze	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::finishAnalyze()$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:()
MultiplyByTwosExponentAnalyzer::finishAnalyze	include/MultiplyByTwosExponentAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:()
MultiplyByTwosExponentAnalyzer::ifTwosExponent	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::ifTwosExponent(int value)$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:(int value)
MultiplyByTwosExponentAnalyzer::ifTwosExponent	include/MultiplyByTwosExponentAnalyzer.h	/^	bool ifTwosExponent(int);$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:private	signature:(int)
MultiplyByTwosExponentAnalyzer::startAnalyze	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::startAnalyze()$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:()
MultiplyByTwosExponentAnalyzer::startAnalyze	include/MultiplyByTwosExponentAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:()
MultiplyByTwosExponentAnalyzer::~MultiplyByTwosExponentAnalyzer	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::~MultiplyByTwosExponentAnalyzer()$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:()
MultiplyByTwosExponentAnalyzer::~MultiplyByTwosExponentAnalyzer	include/MultiplyByTwosExponentAnalyzer.h	/^	virtual ~MultiplyByTwosExponentAnalyzer();$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:()
REAL_DIVISION_ANALYZER_H	include/RealDivisionAnalyzer.h	6;"	d
RealDivisionAnalyzer	RealDivisionAnalyzer.cpp	/^RealDivisionAnalyzer::RealDivisionAnalyzer(){$/;"	f	class:RealDivisionAnalyzer	signature:()
RealDivisionAnalyzer	include/RealDivisionAnalyzer.h	/^	RealDivisionAnalyzer();$/;"	p	class:RealDivisionAnalyzer	access:public	signature:()
RealDivisionAnalyzer	include/RealDivisionAnalyzer.h	/^class RealDivisionAnalyzer : public BaseAnalyzer{$/;"	c	inherits:BaseAnalyzer
RealDivisionAnalyzer::RealDivisionAnalyzer	RealDivisionAnalyzer.cpp	/^RealDivisionAnalyzer::RealDivisionAnalyzer(){$/;"	f	class:RealDivisionAnalyzer	signature:()
RealDivisionAnalyzer::RealDivisionAnalyzer	include/RealDivisionAnalyzer.h	/^	RealDivisionAnalyzer();$/;"	p	class:RealDivisionAnalyzer	access:public	signature:()
RealDivisionAnalyzer::analyzeNode	RealDivisionAnalyzer.cpp	/^void RealDivisionAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:RealDivisionAnalyzer	signature:( GNode *node, const vector< int > &context )
RealDivisionAnalyzer::analyzeNode	include/RealDivisionAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector<int> & );$/;"	p	class:RealDivisionAnalyzer	access:public	signature:( GNode *, const vector<int> & )
RealDivisionAnalyzer::clearAnalyzerState	include/RealDivisionAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:RealDivisionAnalyzer	access:public	signature:()
RealDivisionAnalyzer::finishAnalyze	RealDivisionAnalyzer.cpp	/^void RealDivisionAnalyzer::finishAnalyze(){$/;"	f	class:RealDivisionAnalyzer	signature:()
RealDivisionAnalyzer::finishAnalyze	include/RealDivisionAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:RealDivisionAnalyzer	access:public	signature:()
RealDivisionAnalyzer::startAnalyze	RealDivisionAnalyzer.cpp	/^void RealDivisionAnalyzer::startAnalyze(){$/;"	f	class:RealDivisionAnalyzer	signature:()
RealDivisionAnalyzer::startAnalyze	include/RealDivisionAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:RealDivisionAnalyzer	access:public	signature:()
RealDivisionAnalyzer::~RealDivisionAnalyzer	RealDivisionAnalyzer.cpp	/^RealDivisionAnalyzer::~RealDivisionAnalyzer(){$/;"	f	class:RealDivisionAnalyzer	signature:()
RealDivisionAnalyzer::~RealDivisionAnalyzer	include/RealDivisionAnalyzer.h	/^	virtual ~RealDivisionAnalyzer();$/;"	p	class:RealDivisionAnalyzer	access:public	signature:()
SQRT_ANALYZER_H	include/SqrtAnalyzer.h	6;"	d
STRINGCOPYANALYZER_H_	include/StringCopyAnalyzer.h	9;"	d
STRUCTSIZEANALYZER_H_	include/StructSizeAnalyzer.h	9;"	d
SqrtAnalyzer	SqrtAnalyzer.cpp	/^SqrtAnalyzer::SqrtAnalyzer(){$/;"	f	class:SqrtAnalyzer	signature:()
SqrtAnalyzer	include/SqrtAnalyzer.h	/^	SqrtAnalyzer();$/;"	p	class:SqrtAnalyzer	access:public	signature:()
SqrtAnalyzer	include/SqrtAnalyzer.h	/^class SqrtAnalyzer : public BaseAnalyzer{$/;"	c	inherits:BaseAnalyzer
SqrtAnalyzer::SqrtAnalyzer	SqrtAnalyzer.cpp	/^SqrtAnalyzer::SqrtAnalyzer(){$/;"	f	class:SqrtAnalyzer	signature:()
SqrtAnalyzer::SqrtAnalyzer	include/SqrtAnalyzer.h	/^	SqrtAnalyzer();$/;"	p	class:SqrtAnalyzer	access:public	signature:()
SqrtAnalyzer::analyzeNode	SqrtAnalyzer.cpp	/^void SqrtAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:SqrtAnalyzer	signature:( GNode *node, const vector< int > &context )
SqrtAnalyzer::analyzeNode	include/SqrtAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector<int> & );$/;"	p	class:SqrtAnalyzer	access:public	signature:( GNode *, const vector<int> & )
SqrtAnalyzer::clearAnalyzerState	include/SqrtAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:SqrtAnalyzer	access:public	signature:()
SqrtAnalyzer::finishAnalyze	SqrtAnalyzer.cpp	/^void SqrtAnalyzer::finishAnalyze(){$/;"	f	class:SqrtAnalyzer	signature:()
SqrtAnalyzer::finishAnalyze	include/SqrtAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:SqrtAnalyzer	access:public	signature:()
SqrtAnalyzer::startAnalyze	SqrtAnalyzer.cpp	/^void SqrtAnalyzer::startAnalyze(){$/;"	f	class:SqrtAnalyzer	signature:()
SqrtAnalyzer::startAnalyze	include/SqrtAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:SqrtAnalyzer	access:public	signature:()
SqrtAnalyzer::~SqrtAnalyzer	SqrtAnalyzer.cpp	/^SqrtAnalyzer::~SqrtAnalyzer(){$/;"	f	class:SqrtAnalyzer	signature:()
SqrtAnalyzer::~SqrtAnalyzer	include/SqrtAnalyzer.h	/^	virtual ~SqrtAnalyzer();$/;"	p	class:SqrtAnalyzer	access:public	signature:()
StringCopyAnalyzer	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::StringCopyAnalyzer()$/;"	f	class:StringCopyAnalyzer	signature:()
StringCopyAnalyzer	include/StringCopyAnalyzer.h	/^	StringCopyAnalyzer();$/;"	p	class:StringCopyAnalyzer	access:public	signature:()
StringCopyAnalyzer	include/StringCopyAnalyzer.h	/^class StringCopyAnalyzer : public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
StringCopyAnalyzer::StringCopyAnalyzer	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::StringCopyAnalyzer()$/;"	f	class:StringCopyAnalyzer	signature:()
StringCopyAnalyzer::StringCopyAnalyzer	include/StringCopyAnalyzer.h	/^	StringCopyAnalyzer();$/;"	p	class:StringCopyAnalyzer	access:public	signature:()
StringCopyAnalyzer::analyzeNode	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:StringCopyAnalyzer	signature:(GNode* node,const vector<int>& context)
StringCopyAnalyzer::analyzeNode	include/StringCopyAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:StringCopyAnalyzer	access:public	signature:(GNode*,const vector<int>&)
StringCopyAnalyzer::clearAnalyzerState	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::clearAnalyzerState()$/;"	f	class:StringCopyAnalyzer	signature:()
StringCopyAnalyzer::clearAnalyzerState	include/StringCopyAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:StringCopyAnalyzer	access:public	signature:()
StringCopyAnalyzer::finishAnalyze	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::finishAnalyze()$/;"	f	class:StringCopyAnalyzer	signature:()
StringCopyAnalyzer::finishAnalyze	include/StringCopyAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:StringCopyAnalyzer	access:public	signature:()
StringCopyAnalyzer::startAnalyze	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::startAnalyze()$/;"	f	class:StringCopyAnalyzer	signature:()
StringCopyAnalyzer::startAnalyze	include/StringCopyAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:StringCopyAnalyzer	access:public	signature:()
StringCopyAnalyzer::~StringCopyAnalyzer	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::~StringCopyAnalyzer()$/;"	f	class:StringCopyAnalyzer	signature:()
StringCopyAnalyzer::~StringCopyAnalyzer	include/StringCopyAnalyzer.h	/^	virtual ~StringCopyAnalyzer();$/;"	p	class:StringCopyAnalyzer	access:public	signature:()
StructSizeAnalyzer	StructSizeAnalyzer.cpp	/^StructSizeAnalyzer::StructSizeAnalyzer() {$/;"	f	class:StructSizeAnalyzer	signature:()
StructSizeAnalyzer	include/StructSizeAnalyzer.h	/^	StructSizeAnalyzer();$/;"	p	class:StructSizeAnalyzer	access:public	signature:()
StructSizeAnalyzer	include/StructSizeAnalyzer.h	/^class StructSizeAnalyzer : public BaseAnalyzer$/;"	c	inherits:BaseAnalyzer
StructSizeAnalyzer::StructSizeAnalyzer	StructSizeAnalyzer.cpp	/^StructSizeAnalyzer::StructSizeAnalyzer() {$/;"	f	class:StructSizeAnalyzer	signature:()
StructSizeAnalyzer::StructSizeAnalyzer	include/StructSizeAnalyzer.h	/^	StructSizeAnalyzer();$/;"	p	class:StructSizeAnalyzer	access:public	signature:()
StructSizeAnalyzer::analyzeNode	StructSizeAnalyzer.cpp	/^void StructSizeAnalyzer::analyzeNode(GNode* node, const vector<int>& context) {$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node, const vector<int>& context)
StructSizeAnalyzer::analyzeNode	include/StructSizeAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:StructSizeAnalyzer	access:public	signature:(GNode*,const vector<int>&)
StructSizeAnalyzer::calStructSize	StructSizeAnalyzer.cpp	/^bool StructSizeAnalyzer::calStructSize(GNode* node) {$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node)
StructSizeAnalyzer::calStructSize	include/StructSizeAnalyzer.h	/^	bool calStructSize(GNode*);$/;"	p	class:StructSizeAnalyzer	access:private	signature:(GNode*)
StructSizeAnalyzer::checkUnionType	StructSizeAnalyzer.cpp	/^int StructSizeAnalyzer::checkUnionType(GNode* node) {$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node)
StructSizeAnalyzer::checkUnionType	include/StructSizeAnalyzer.h	/^	int checkUnionType(GNode*);$/;"	p	class:StructSizeAnalyzer	access:private	signature:(GNode*)
StructSizeAnalyzer::clearAnalyzerState	StructSizeAnalyzer.cpp	/^void StructSizeAnalyzer::clearAnalyzerState() {$/;"	f	class:StructSizeAnalyzer	signature:()
StructSizeAnalyzer::clearAnalyzerState	include/StructSizeAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:StructSizeAnalyzer	access:public	signature:()
StructSizeAnalyzer::finishAnalyze	StructSizeAnalyzer.cpp	/^void StructSizeAnalyzer::finishAnalyze() {$/;"	f	class:StructSizeAnalyzer	signature:()
StructSizeAnalyzer::finishAnalyze	include/StructSizeAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:StructSizeAnalyzer	access:public	signature:()
StructSizeAnalyzer::getArrayTypeNode	StructSizeAnalyzer.cpp	/^GNode* StructSizeAnalyzer::getArrayTypeNode(GNode* node) {$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node)
StructSizeAnalyzer::getArrayTypeNode	include/StructSizeAnalyzer.h	/^	GNode* getArrayTypeNode(GNode*);$/;"	p	class:StructSizeAnalyzer	access:private	signature:(GNode*)
StructSizeAnalyzer::getHashName	StructSizeAnalyzer.cpp	/^string StructSizeAnalyzer::getHashName(GNode* node){$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node)
StructSizeAnalyzer::getHashName	include/StructSizeAnalyzer.h	/^	string getHashName(GNode*);$/;"	p	class:StructSizeAnalyzer	access:private	signature:(GNode*)
StructSizeAnalyzer::getStructLocation	StructSizeAnalyzer.cpp	/^string StructSizeAnalyzer::getStructLocation(GNode* node){$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node)
StructSizeAnalyzer::getStructLocation	include/StructSizeAnalyzer.h	/^	string getStructLocation(GNode*);$/;"	p	class:StructSizeAnalyzer	access:private	signature:(GNode*)
StructSizeAnalyzer::startAnalyze	StructSizeAnalyzer.cpp	/^void StructSizeAnalyzer::startAnalyze() {$/;"	f	class:StructSizeAnalyzer	signature:()
StructSizeAnalyzer::startAnalyze	include/StructSizeAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:StructSizeAnalyzer	access:public	signature:()
StructSizeAnalyzer::structMap	include/StructSizeAnalyzer.h	/^  map <string, bool > structMap;$/;"	m	class:StructSizeAnalyzer	access:private
StructSizeAnalyzer::~StructSizeAnalyzer	StructSizeAnalyzer.cpp	/^StructSizeAnalyzer::~StructSizeAnalyzer() {$/;"	f	class:StructSizeAnalyzer	signature:()
StructSizeAnalyzer::~StructSizeAnalyzer	include/StructSizeAnalyzer.h	/^	virtual ~StructSizeAnalyzer();$/;"	p	class:StructSizeAnalyzer	access:public	signature:()
analyzeNode	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:AssignToConstantAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:BadMemOperationCallAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	BitNotExprAnalyzer.cpp	/^void BitNotExprAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:BitNotExprAnalyzer	signature:( GNode *node, const vector< int > &context )
analyzeNode	ConditionInLoopAnalyzer.cpp	/^ConditionInLoopAnalyzer::analyzeNode(GNode* node,const vector<int>& context){$/;"	f	class:ConditionInLoopAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:DivideByTwosExponentAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	ForLoopCombineAnalyzer.cpp	/^void ForLoopCombineAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node, const vector< int > &context )
analyzeNode	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:ForLoopToZeroAnalyzer	signature:( GNode *node, const vector< int > &context )
analyzeNode	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:FunctionCallAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	FunctionCodeSizeAnalyzer.cpp	/^void FunctionCodeSizeAnalyzer::analyzeNode(GNode *node,$/;"	f	class:FunctionCodeSizeAnalyzer	signature:(GNode *node, const vector<int> &context)
analyzeNode	GeAndLeCondAnalyzer.cpp	/^GeAndLeCondAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:GeAndLeCondAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	GlobalVarSizeAnalyzer.cpp	/^void GlobalVarSizeAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:GlobalVarSizeAnalyzer	signature:( GNode *node, const vector< int > &context )
analyzeNode	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::analyzeNode(GNode* node,const vector<int>& context){$/;"	f	class:IfToSwitchAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	LocalVarSizeAnalyzer.cpp	/^void LocalVarSizeAnalyzer::analyzeNode(GNode *node,$/;"	f	class:LocalVarSizeAnalyzer	signature:(GNode *node, const vector<int> &context)
analyzeNode	LoopDivideAnalyzer.cpp	/^void LoopDivideAnalyzer::analyzeNode(GNode *node, const vector<int> &context) {$/;"	f	class:LoopDivideAnalyzer	signature:(GNode *node, const vector<int> &context)
analyzeNode	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::analyzeNode(GNode* node,const vector<int>& context){$/;"	f	class:MemApplyAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	MultiConditionAnalyzer.cpp	/^void MultiConditionAnalyzer::analyzeNode(GNode *node,$/;"	f	class:MultiConditionAnalyzer	signature:(GNode *node, const vector<int> &context)
analyzeNode	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	RealDivisionAnalyzer.cpp	/^void RealDivisionAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:RealDivisionAnalyzer	signature:( GNode *node, const vector< int > &context )
analyzeNode	SqrtAnalyzer.cpp	/^void SqrtAnalyzer::analyzeNode( GNode *node, const vector< int > &context ){$/;"	f	class:SqrtAnalyzer	signature:( GNode *node, const vector< int > &context )
analyzeNode	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::analyzeNode(GNode* node,const vector<int>& context)$/;"	f	class:StringCopyAnalyzer	signature:(GNode* node,const vector<int>& context)
analyzeNode	StructSizeAnalyzer.cpp	/^void StructSizeAnalyzer::analyzeNode(GNode* node, const vector<int>& context) {$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node, const vector<int>& context)
analyzeNode	include/AssignToConstantAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/BadMemOperationCallAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/BitNotExprAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector< int > & );$/;"	p	class:BitNotExprAnalyzer	access:public	signature:( GNode *, const vector< int > & )
analyzeNode	include/ConditionInLoopAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:ConditionInLoopAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/DivideByTwosExponentAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/ForLoopCombineAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector< int > & );$/;"	p	class:ForLoopCombineAnalyzer	access:public	signature:( GNode *, const vector< int > & )
analyzeNode	include/ForLoopToZeroAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector< int > & );$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:( GNode *, const vector< int > & )
analyzeNode	include/FunctionAsLoopVarAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector< int > & );$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:( GNode *, const vector< int > & )
analyzeNode	include/FunctionCallAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:FunctionCallAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/FunctionCodeSizeAnalyzer.h	/^	virtual void analyzeNode(GNode *, const vector<int> &);$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:(GNode *, const vector<int> &)
analyzeNode	include/GeAndLeCondAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:GeAndLeCondAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/GlobalVarSizeAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector< int > & );$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:( GNode *, const vector< int > & )
analyzeNode	include/IfToSwitchAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/InitializeArrayByForLoopAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/LocalVarSizeAnalyzer.h	/^	virtual void analyzeNode(GNode *, const vector<int> &);$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:(GNode *, const vector<int> &)
analyzeNode	include/LoopDivideAnalyzer.h	/^	virtual void analyzeNode(GNode *, const vector<int> &);$/;"	p	class:LoopDivideAnalyzer	access:public	signature:(GNode *, const vector<int> &)
analyzeNode	include/MemApplyAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:MemApplyAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/MultiConditionAnalyzer.h	/^	virtual void analyzeNode(GNode *, const vector<int> &);$/;"	p	class:MultiConditionAnalyzer	access:public	signature:(GNode *, const vector<int> &)
analyzeNode	include/MultiplyByTwosExponentAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/RealDivisionAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector<int> & );$/;"	p	class:RealDivisionAnalyzer	access:public	signature:( GNode *, const vector<int> & )
analyzeNode	include/SqrtAnalyzer.h	/^	virtual void analyzeNode( GNode *, const vector<int> & );$/;"	p	class:SqrtAnalyzer	access:public	signature:( GNode *, const vector<int> & )
analyzeNode	include/StringCopyAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:StringCopyAnalyzer	access:public	signature:(GNode*,const vector<int>&)
analyzeNode	include/StructSizeAnalyzer.h	/^	virtual void analyzeNode(GNode*,const vector<int>&);$/;"	p	class:StructSizeAnalyzer	access:public	signature:(GNode*,const vector<int>&)
calStructSize	StructSizeAnalyzer.cpp	/^bool StructSizeAnalyzer::calStructSize(GNode* node) {$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node)
calStructSize	include/StructSizeAnalyzer.h	/^	bool calStructSize(GNode*);$/;"	p	class:StructSizeAnalyzer	access:private	signature:(GNode*)
checkInitStmt	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::checkInitStmt( GNode *node, const vector< int > &context ){$/;"	f	class:ForLoopToZeroAnalyzer	signature:( GNode *node, const vector< int > &context )
checkInitStmt	include/ForLoopToZeroAnalyzer.h	/^	void checkInitStmt( GNode *, const vector< int > & );$/;"	p	class:ForLoopToZeroAnalyzer	access:private	signature:( GNode *, const vector< int > & )
checkTwoExpression	ForLoopCombineAnalyzer.cpp	/^bool ForLoopCombineAnalyzer::checkTwoExpression( GNode *node1, GNode *node2 ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node1, GNode *node2 )
checkTwoExpression	include/ForLoopCombineAnalyzer.h	/^	bool checkTwoExpression( GNode *, GNode * );$/;"	p	class:ForLoopCombineAnalyzer	access:private	signature:( GNode *, GNode * )
checkTwoLoop	ForLoopCombineAnalyzer.cpp	/^bool ForLoopCombineAnalyzer::checkTwoLoop( GNode *node1, GNode *node2, const vector< int > &context ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node1, GNode *node2, const vector< int > &context )
checkTwoLoop	include/ForLoopCombineAnalyzer.h	/^	bool checkTwoLoop( GNode *, GNode *, const vector< int > & );$/;"	p	class:ForLoopCombineAnalyzer	access:private	signature:( GNode *, GNode *, const vector< int > & )
checkTwoLoopCond	ForLoopCombineAnalyzer.cpp	/^bool ForLoopCombineAnalyzer::checkTwoLoopCond( GNode *node1, GNode *node2 ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node1, GNode *node2 )
checkTwoLoopCond	include/ForLoopCombineAnalyzer.h	/^	bool checkTwoLoopCond( GNode *, GNode * );$/;"	p	class:ForLoopCombineAnalyzer	access:private	signature:( GNode *, GNode * )
checkTwoLoopExpr	ForLoopCombineAnalyzer.cpp	/^bool ForLoopCombineAnalyzer::checkTwoLoopExpr( GNode *node1, GNode *node2 ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node1, GNode *node2 )
checkTwoLoopExpr	include/ForLoopCombineAnalyzer.h	/^	bool checkTwoLoopExpr( GNode *, GNode * );$/;"	p	class:ForLoopCombineAnalyzer	access:private	signature:( GNode *, GNode * )
checkTwoLoopInit	ForLoopCombineAnalyzer.cpp	/^bool ForLoopCombineAnalyzer::checkTwoLoopInit( GNode *node1, GNode *node2 ){$/;"	f	class:ForLoopCombineAnalyzer	signature:( GNode *node1, GNode *node2 )
checkTwoLoopInit	include/ForLoopCombineAnalyzer.h	/^	bool checkTwoLoopInit( GNode *, GNode * );$/;"	p	class:ForLoopCombineAnalyzer	access:private	signature:( GNode *, GNode * )
checkUnionType	StructSizeAnalyzer.cpp	/^int StructSizeAnalyzer::checkUnionType(GNode* node) {$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node)
checkUnionType	include/StructSizeAnalyzer.h	/^	int checkUnionType(GNode*);$/;"	p	class:StructSizeAnalyzer	access:private	signature:(GNode*)
clearAnalyzerState	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::clearAnalyzerState()$/;"	f	class:AssignToConstantAnalyzer	signature:()
clearAnalyzerState	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::clearAnalyzerState()$/;"	f	class:BadMemOperationCallAnalyzer	signature:()
clearAnalyzerState	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::clearAnalyzerState()$/;"	f	class:DivideByTwosExponentAnalyzer	signature:()
clearAnalyzerState	ForLoopToZeroAnalyzer.cpp	/^ForLoopToZeroAnalyzer::clearAnalyzerState(){$/;"	f	class:ForLoopToZeroAnalyzer	signature:()
clearAnalyzerState	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::clearAnalyzerState()$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:()
clearAnalyzerState	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::clearAnalyzerState()$/;"	f	class:FunctionCallAnalyzer	signature:()
clearAnalyzerState	FunctionCodeSizeAnalyzer.cpp	/^void FunctionCodeSizeAnalyzer::clearAnalyzerState(){$/;"	f	class:FunctionCodeSizeAnalyzer	signature:()
clearAnalyzerState	GlobalVarSizeAnalyzer.cpp	/^void GlobalVarSizeAnalyzer::clearAnalyzerState(){$/;"	f	class:GlobalVarSizeAnalyzer	signature:()
clearAnalyzerState	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::clearAnalyzerState(){$/;"	f	class:IfToSwitchAnalyzer	signature:()
clearAnalyzerState	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::clearAnalyzerState()$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:()
clearAnalyzerState	LocalVarSizeAnalyzer.cpp	/^LocalVarSizeAnalyzer::clearAnalyzerState() {$/;"	f	class:LocalVarSizeAnalyzer	signature:()
clearAnalyzerState	LoopDivideAnalyzer.cpp	/^LoopDivideAnalyzer::clearAnalyzerState() {$/;"	f	class:LoopDivideAnalyzer	signature:()
clearAnalyzerState	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::clearAnalyzerState() {$/;"	f	class:MemApplyAnalyzer	signature:()
clearAnalyzerState	MultiConditionAnalyzer.cpp	/^void MultiConditionAnalyzer::clearAnalyzerState(){$/;"	f	class:MultiConditionAnalyzer	signature:()
clearAnalyzerState	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::clearAnalyzerState()$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:()
clearAnalyzerState	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::clearAnalyzerState()$/;"	f	class:StringCopyAnalyzer	signature:()
clearAnalyzerState	StructSizeAnalyzer.cpp	/^void StructSizeAnalyzer::clearAnalyzerState() {$/;"	f	class:StructSizeAnalyzer	signature:()
clearAnalyzerState	include/AssignToConstantAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:()
clearAnalyzerState	include/BadMemOperationCallAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:()
clearAnalyzerState	include/BitNotExprAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:BitNotExprAnalyzer	access:public	signature:()
clearAnalyzerState	include/ConditionInLoopAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:ConditionInLoopAnalyzer	access:public	signature:()
clearAnalyzerState	include/DivideByTwosExponentAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:()
clearAnalyzerState	include/ForLoopCombineAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:ForLoopCombineAnalyzer	access:public	signature:()
clearAnalyzerState	include/ForLoopToZeroAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:()
clearAnalyzerState	include/FunctionAsLoopVarAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:()
clearAnalyzerState	include/FunctionCallAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:FunctionCallAnalyzer	access:public	signature:()
clearAnalyzerState	include/FunctionCodeSizeAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:()
clearAnalyzerState	include/GeAndLeCondAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:GeAndLeCondAnalyzer	access:public	signature:()
clearAnalyzerState	include/GlobalVarSizeAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:()
clearAnalyzerState	include/IfToSwitchAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:()
clearAnalyzerState	include/InitializeArrayByForLoopAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:()
clearAnalyzerState	include/LocalVarSizeAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:()
clearAnalyzerState	include/LoopDivideAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:LoopDivideAnalyzer	access:public	signature:()
clearAnalyzerState	include/MemApplyAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:MemApplyAnalyzer	access:public	signature:()
clearAnalyzerState	include/MultiConditionAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:MultiConditionAnalyzer	access:public	signature:()
clearAnalyzerState	include/MultiplyByTwosExponentAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:()
clearAnalyzerState	include/RealDivisionAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:RealDivisionAnalyzer	access:public	signature:()
clearAnalyzerState	include/SqrtAnalyzer.h	/^	virtual void clearAnalyzerState(){};$/;"	f	class:SqrtAnalyzer	access:public	signature:()
clearAnalyzerState	include/StringCopyAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:StringCopyAnalyzer	access:public	signature:()
clearAnalyzerState	include/StructSizeAnalyzer.h	/^	virtual void clearAnalyzerState();$/;"	p	class:StructSizeAnalyzer	access:public	signature:()
codeLocation	include/GlobalVarSizeAnalyzer.h	/^	unsigned long totalGlobalVarSize, codeLocation;$/;"	m	class:GlobalVarSizeAnalyzer	access:private
codeLocation	include/MemApplyAnalyzer.h	/^    int codeLocation;$/;"	m	class:MemApplyAnalyzer	access:private
codeSize	include/FunctionCodeSizeAnalyzer.h	/^	int codeSize;$/;"	m	class:FunctionCodeSizeAnalyzer	access:private
condVarVec	include/ForLoopToZeroAnalyzer.h	/^	vector< string > condVarVec, iterVarVec;$/;"	m	class:ForLoopToZeroAnalyzer	access:private
conditionNode	include/IfToSwitchAnalyzer.h	/^	struct conditionNode{$/;"	s	class:IfToSwitchAnalyzer	access:public
deferedAnalyze	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::deferedAnalyze(GNode* node,const vector<int>& context)$/;"	f	class:BadMemOperationCallAnalyzer	signature:(GNode* node,const vector<int>& context)
deferedAnalyze	include/BadMemOperationCallAnalyzer.h	/^	void deferedAnalyze(GNode*,const vector<int>&);$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:(GNode*,const vector<int>&)
father	include/IfToSwitchAnalyzer.h	/^		int father;$/;"	m	struct:IfToSwitchAnalyzer::conditionNode	access:public
findIterWithExpr	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::findIterWithExpr( GNode *node ){$/;"	f	class:ForLoopToZeroAnalyzer	signature:( GNode *node )
findIterWithExpr	include/ForLoopToZeroAnalyzer.h	/^	void findIterWithExpr( GNode * );$/;"	p	class:ForLoopToZeroAnalyzer	access:private	signature:( GNode * )
findVarInCond	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::findVarInCond( GNode *node ){$/;"	f	class:ForLoopToZeroAnalyzer	signature:( GNode *node )
findVarInCond	include/ForLoopToZeroAnalyzer.h	/^	void findVarInCond( GNode * ); $/;"	p	class:ForLoopToZeroAnalyzer	access:private	signature:( GNode * )
finishAnalyze	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::finishAnalyze()$/;"	f	class:AssignToConstantAnalyzer	signature:()
finishAnalyze	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::finishAnalyze()$/;"	f	class:BadMemOperationCallAnalyzer	signature:()
finishAnalyze	BitNotExprAnalyzer.cpp	/^void BitNotExprAnalyzer::finishAnalyze(){$/;"	f	class:BitNotExprAnalyzer	signature:()
finishAnalyze	ConditionInLoopAnalyzer.cpp	/^ConditionInLoopAnalyzer::finishAnalyze(){$/;"	f	class:ConditionInLoopAnalyzer	signature:()
finishAnalyze	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::finishAnalyze()$/;"	f	class:DivideByTwosExponentAnalyzer	signature:()
finishAnalyze	ForLoopCombineAnalyzer.cpp	/^void ForLoopCombineAnalyzer::finishAnalyze(){$/;"	f	class:ForLoopCombineAnalyzer	signature:()
finishAnalyze	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::finishAnalyze(){$/;"	f	class:ForLoopToZeroAnalyzer	signature:()
finishAnalyze	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::finishAnalyze()$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:()
finishAnalyze	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::finishAnalyze()$/;"	f	class:FunctionCallAnalyzer	signature:()
finishAnalyze	FunctionCodeSizeAnalyzer.cpp	/^void FunctionCodeSizeAnalyzer::finishAnalyze() {$/;"	f	class:FunctionCodeSizeAnalyzer	signature:()
finishAnalyze	GeAndLeCondAnalyzer.cpp	/^GeAndLeCondAnalyzer::finishAnalyze()$/;"	f	class:GeAndLeCondAnalyzer	signature:()
finishAnalyze	GlobalVarSizeAnalyzer.cpp	/^void GlobalVarSizeAnalyzer::finishAnalyze(){$/;"	f	class:GlobalVarSizeAnalyzer	signature:()
finishAnalyze	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::finishAnalyze(){$/;"	f	class:IfToSwitchAnalyzer	signature:()
finishAnalyze	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::finishAnalyze()$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:()
finishAnalyze	LocalVarSizeAnalyzer.cpp	/^void LocalVarSizeAnalyzer::finishAnalyze() {$/;"	f	class:LocalVarSizeAnalyzer	signature:()
finishAnalyze	LoopDivideAnalyzer.cpp	/^void LoopDivideAnalyzer::finishAnalyze() {$/;"	f	class:LoopDivideAnalyzer	signature:()
finishAnalyze	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::finishAnalyze(){$/;"	f	class:MemApplyAnalyzer	signature:()
finishAnalyze	MultiConditionAnalyzer.cpp	/^void MultiConditionAnalyzer::finishAnalyze() {$/;"	f	class:MultiConditionAnalyzer	signature:()
finishAnalyze	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::finishAnalyze()$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:()
finishAnalyze	RealDivisionAnalyzer.cpp	/^void RealDivisionAnalyzer::finishAnalyze(){$/;"	f	class:RealDivisionAnalyzer	signature:()
finishAnalyze	SqrtAnalyzer.cpp	/^void SqrtAnalyzer::finishAnalyze(){$/;"	f	class:SqrtAnalyzer	signature:()
finishAnalyze	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::finishAnalyze()$/;"	f	class:StringCopyAnalyzer	signature:()
finishAnalyze	StructSizeAnalyzer.cpp	/^void StructSizeAnalyzer::finishAnalyze() {$/;"	f	class:StructSizeAnalyzer	signature:()
finishAnalyze	include/AssignToConstantAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:()
finishAnalyze	include/BadMemOperationCallAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:()
finishAnalyze	include/BitNotExprAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:BitNotExprAnalyzer	access:public	signature:()
finishAnalyze	include/ConditionInLoopAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:ConditionInLoopAnalyzer	access:public	signature:()
finishAnalyze	include/DivideByTwosExponentAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:()
finishAnalyze	include/ForLoopCombineAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:ForLoopCombineAnalyzer	access:public	signature:()
finishAnalyze	include/ForLoopToZeroAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:()
finishAnalyze	include/FunctionAsLoopVarAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:()
finishAnalyze	include/FunctionCallAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:FunctionCallAnalyzer	access:public	signature:()
finishAnalyze	include/FunctionCodeSizeAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:()
finishAnalyze	include/GeAndLeCondAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:GeAndLeCondAnalyzer	access:public	signature:()
finishAnalyze	include/GlobalVarSizeAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:()
finishAnalyze	include/IfToSwitchAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:()
finishAnalyze	include/InitializeArrayByForLoopAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:()
finishAnalyze	include/LocalVarSizeAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:()
finishAnalyze	include/LoopDivideAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:LoopDivideAnalyzer	access:public	signature:()
finishAnalyze	include/MemApplyAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:MemApplyAnalyzer	access:public	signature:()
finishAnalyze	include/MultiConditionAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:MultiConditionAnalyzer	access:public	signature:()
finishAnalyze	include/MultiplyByTwosExponentAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:()
finishAnalyze	include/RealDivisionAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:RealDivisionAnalyzer	access:public	signature:()
finishAnalyze	include/SqrtAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:SqrtAnalyzer	access:public	signature:()
finishAnalyze	include/StringCopyAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:StringCopyAnalyzer	access:public	signature:()
finishAnalyze	include/StructSizeAnalyzer.h	/^	virtual void finishAnalyze();$/;"	p	class:StructSizeAnalyzer	access:public	signature:()
fun_decl_line_num	include/FunctionCodeSizeAnalyzer.h	/^	int fun_decl_line_num;$/;"	m	class:FunctionCodeSizeAnalyzer	access:private
fun_decl_line_num	include/LocalVarSizeAnalyzer.h	/^	int fun_decl_line_num;$/;"	m	class:LocalVarSizeAnalyzer	access:private
function_name	include/FunctionCodeSizeAnalyzer.h	/^	string function_name;$/;"	m	class:FunctionCodeSizeAnalyzer	access:private
function_name	include/LocalVarSizeAnalyzer.h	/^	string function_name;$/;"	m	class:LocalVarSizeAnalyzer	access:private
getArrayTypeNode	StructSizeAnalyzer.cpp	/^GNode* StructSizeAnalyzer::getArrayTypeNode(GNode* node) {$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node)
getArrayTypeNode	include/StructSizeAnalyzer.h	/^	GNode* getArrayTypeNode(GNode*);$/;"	p	class:StructSizeAnalyzer	access:private	signature:(GNode*)
getHashName	StructSizeAnalyzer.cpp	/^string StructSizeAnalyzer::getHashName(GNode* node){$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node)
getHashName	include/StructSizeAnalyzer.h	/^	string getHashName(GNode*);$/;"	p	class:StructSizeAnalyzer	access:private	signature:(GNode*)
getInstance	FindSameFunctionAnalyzer.cpp	/^FindSameFunctionAnalyzer::getInstance()$/;"	f	class:FindSameFunctionAnalyzer	signature:()
getInstance	include/FindSameFunctionAnalyzer.h	/^	static FindSameFunctionAnalyzer& getInstance();$/;"	p	class:FindSameFunctionAnalyzer	access:public	signature:()
getStructLocation	StructSizeAnalyzer.cpp	/^string StructSizeAnalyzer::getStructLocation(GNode* node){$/;"	f	class:StructSizeAnalyzer	signature:(GNode* node)
getStructLocation	include/StructSizeAnalyzer.h	/^	string getStructLocation(GNode*);$/;"	p	class:StructSizeAnalyzer	access:private	signature:(GNode*)
getVarIDOrder	IfToSwitchAnalyzer.cpp	/^bool IfToSwitchAnalyzer::getVarIDOrder(conditionNode a, conditionNode b){$/;"	f	class:IfToSwitchAnalyzer	signature:(conditionNode a, conditionNode b)
getVarIDOrder	include/IfToSwitchAnalyzer.h	/^	static bool getVarIDOrder(conditionNode a, conditionNode b);$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:(conditionNode a, conditionNode b)
globalAnalyze	FindSameFunctionAnalyzer.cpp	/^FindSameFunctionAnalyzer::globalAnalyze(unsigned int hashCode, string function){$/;"	f	class:FindSameFunctionAnalyzer	signature:(unsigned int hashCode, string function)
globalAnalyze	include/FindSameFunctionAnalyzer.h	/^  void globalAnalyze(unsigned int hashCode, string function);$/;"	p	class:FindSameFunctionAnalyzer	access:public	signature:(unsigned int hashCode, string function)
globalVarMap	include/GlobalVarSizeAnalyzer.h	/^	std::map<string, int> globalVarMap;$/;"	m	class:GlobalVarSizeAnalyzer	access:private
iContextLine	include/IfToSwitchAnalyzer.h	/^		int iContextLine;$/;"	m	struct:IfToSwitchAnalyzer::conditionNode	access:public
ifTwosExponent	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::ifTwosExponent(int value)$/;"	f	class:DivideByTwosExponentAnalyzer	signature:(int value)
ifTwosExponent	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::ifTwosExponent(int value)$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:(int value)
ifTwosExponent	include/DivideByTwosExponentAnalyzer.h	/^	bool ifTwosExponent(int);$/;"	p	class:DivideByTwosExponentAnalyzer	access:private	signature:(int)
ifTwosExponent	include/MultiplyByTwosExponentAnalyzer.h	/^	bool ifTwosExponent(int);$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:private	signature:(int)
isConditionFunction	FunctionCallAnalyzer.cpp	/^bool FunctionCallAnalyzer::isConditionFunction(GTree* tree)$/;"	f	class:FunctionCallAnalyzer	signature:(GTree* tree)
isConditionFunction	include/FunctionCallAnalyzer.h	/^	bool isConditionFunction(GTree* tree);$/;"	p	class:FunctionCallAnalyzer	access:private	signature:(GTree* tree)
isIfToSwitch	IfToSwitchAnalyzer.cpp	/^void IfToSwitchAnalyzer::isIfToSwitch(const vector<int>& conSet){$/;"	f	class:IfToSwitchAnalyzer	signature:(const vector<int>& conSet)
isIfToSwitch	include/IfToSwitchAnalyzer.h	/^	void isIfToSwitch(const vector<int>&);$/;"	p	class:IfToSwitchAnalyzer	access:private	signature:(const vector<int>&)
isParamPointingToPOD	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::isParamPointingToPOD(GNode* node)$/;"	f	class:BadMemOperationCallAnalyzer	signature:(GNode* node)
isParamPointingToPOD	include/BadMemOperationCallAnalyzer.h	/^	bool isParamPointingToPOD(GNode* node);$/;"	p	class:BadMemOperationCallAnalyzer	access:private	signature:(GNode* node)
isParamPointingToPrimitive	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::isParamPointingToPrimitive(GNode* node)$/;"	f	class:BadMemOperationCallAnalyzer	signature:(GNode* node)
isParamPointingToPrimitive	include/BadMemOperationCallAnalyzer.h	/^	bool isParamPointingToPrimitive(GNode* node);$/;"	p	class:BadMemOperationCallAnalyzer	access:private	signature:(GNode* node)
isStrInVector	ForLoopToZeroAnalyzer.cpp	/^bool ForLoopToZeroAnalyzer::isStrInVector( string &str, vector< string > &vec ){$/;"	f	class:ForLoopToZeroAnalyzer	signature:( string &str, vector< string > &vec )
isStrInVector	include/ForLoopToZeroAnalyzer.h	/^	bool isStrInVector( string &, vector< string > & );$/;"	p	class:ForLoopToZeroAnalyzer	access:private	signature:( string &, vector< string > & )
iterVarVec	include/ForLoopToZeroAnalyzer.h	/^	vector< string > condVarVec, iterVarVec;$/;"	m	class:ForLoopToZeroAnalyzer	access:private
loopFactor	include/LoopDivideAnalyzer.h	/^	int loopFactor;$/;"	m	class:LoopDivideAnalyzer	access:private
mConditionNodeVector	include/IfToSwitchAnalyzer.h	/^	vector< conditionNode > mConditionNodeVector;$/;"	m	class:IfToSwitchAnalyzer	access:private
mContextArray	include/BadMemOperationCallAnalyzer.h	/^	vector<vector<int> > mContextArray;$/;"	m	class:BadMemOperationCallAnalyzer	access:private
mContextArray	include/IfToSwitchAnalyzer.h	/^	vector<vector<int> > mContextArray;$/;"	m	class:IfToSwitchAnalyzer	access:private
mFindSameFunctionAnalyzer	include/FindSameFunctionAnalyzer.h	/^	 static FindSameFunctionAnalyzer *mFindSameFunctionAnalyzer;$/;"	m	class:FindSameFunctionAnalyzer	access:private
mNodeArrayToBeAnalyzed	include/BadMemOperationCallAnalyzer.h	/^	vector<GNode*> mNodeArrayToBeAnalyzed;$/;"	m	class:BadMemOperationCallAnalyzer	access:private
memApplyCallCounter	include/MemApplyAnalyzer.h	/^    int memApplyCallCounter;$/;"	m	class:MemApplyAnalyzer	access:private
mfunctionHashMap	include/FindSameFunctionAnalyzer.h	/^	 map <unsigned int , string > mfunctionHashMap;$/;"	m	class:FindSameFunctionAnalyzer	access:private
node	include/IfToSwitchAnalyzer.h	/^		GNode* node;$/;"	m	struct:IfToSwitchAnalyzer::conditionNode	access:public
printed	include/FunctionCodeSizeAnalyzer.h	/^	bool printed;$/;"	m	class:FunctionCodeSizeAnalyzer	access:private
startAnalyze	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::startAnalyze()$/;"	f	class:AssignToConstantAnalyzer	signature:()
startAnalyze	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::startAnalyze()$/;"	f	class:BadMemOperationCallAnalyzer	signature:()
startAnalyze	BitNotExprAnalyzer.cpp	/^void BitNotExprAnalyzer::startAnalyze(){$/;"	f	class:BitNotExprAnalyzer	signature:()
startAnalyze	ConditionInLoopAnalyzer.cpp	/^ConditionInLoopAnalyzer::startAnalyze(){$/;"	f	class:ConditionInLoopAnalyzer	signature:()
startAnalyze	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::startAnalyze()$/;"	f	class:DivideByTwosExponentAnalyzer	signature:()
startAnalyze	ForLoopCombineAnalyzer.cpp	/^void ForLoopCombineAnalyzer::startAnalyze(){$/;"	f	class:ForLoopCombineAnalyzer	signature:()
startAnalyze	ForLoopToZeroAnalyzer.cpp	/^void ForLoopToZeroAnalyzer::startAnalyze(){$/;"	f	class:ForLoopToZeroAnalyzer	signature:()
startAnalyze	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::startAnalyze()$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:()
startAnalyze	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::startAnalyze()$/;"	f	class:FunctionCallAnalyzer	signature:()
startAnalyze	FunctionCodeSizeAnalyzer.cpp	/^void FunctionCodeSizeAnalyzer::startAnalyze() {$/;"	f	class:FunctionCodeSizeAnalyzer	signature:()
startAnalyze	GeAndLeCondAnalyzer.cpp	/^GeAndLeCondAnalyzer::startAnalyze()$/;"	f	class:GeAndLeCondAnalyzer	signature:()
startAnalyze	GlobalVarSizeAnalyzer.cpp	/^void GlobalVarSizeAnalyzer::startAnalyze(){$/;"	f	class:GlobalVarSizeAnalyzer	signature:()
startAnalyze	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::startAnalyze(){$/;"	f	class:IfToSwitchAnalyzer	signature:()
startAnalyze	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::startAnalyze()$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:()
startAnalyze	LocalVarSizeAnalyzer.cpp	/^void LocalVarSizeAnalyzer::startAnalyze() {$/;"	f	class:LocalVarSizeAnalyzer	signature:()
startAnalyze	LoopDivideAnalyzer.cpp	/^void LoopDivideAnalyzer::startAnalyze() {$/;"	f	class:LoopDivideAnalyzer	signature:()
startAnalyze	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::startAnalyze(){$/;"	f	class:MemApplyAnalyzer	signature:()
startAnalyze	MultiConditionAnalyzer.cpp	/^void MultiConditionAnalyzer::startAnalyze() {$/;"	f	class:MultiConditionAnalyzer	signature:()
startAnalyze	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::startAnalyze()$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:()
startAnalyze	RealDivisionAnalyzer.cpp	/^void RealDivisionAnalyzer::startAnalyze(){$/;"	f	class:RealDivisionAnalyzer	signature:()
startAnalyze	SqrtAnalyzer.cpp	/^void SqrtAnalyzer::startAnalyze(){$/;"	f	class:SqrtAnalyzer	signature:()
startAnalyze	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::startAnalyze()$/;"	f	class:StringCopyAnalyzer	signature:()
startAnalyze	StructSizeAnalyzer.cpp	/^void StructSizeAnalyzer::startAnalyze() {$/;"	f	class:StructSizeAnalyzer	signature:()
startAnalyze	include/AssignToConstantAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:()
startAnalyze	include/BadMemOperationCallAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:()
startAnalyze	include/BitNotExprAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:BitNotExprAnalyzer	access:public	signature:()
startAnalyze	include/ConditionInLoopAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:ConditionInLoopAnalyzer	access:public	signature:()
startAnalyze	include/DivideByTwosExponentAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:()
startAnalyze	include/ForLoopCombineAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:ForLoopCombineAnalyzer	access:public	signature:()
startAnalyze	include/ForLoopToZeroAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:()
startAnalyze	include/FunctionAsLoopVarAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:()
startAnalyze	include/FunctionCallAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:FunctionCallAnalyzer	access:public	signature:()
startAnalyze	include/FunctionCodeSizeAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:()
startAnalyze	include/GeAndLeCondAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:GeAndLeCondAnalyzer	access:public	signature:()
startAnalyze	include/GlobalVarSizeAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:()
startAnalyze	include/IfToSwitchAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:()
startAnalyze	include/InitializeArrayByForLoopAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:()
startAnalyze	include/LocalVarSizeAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:()
startAnalyze	include/LoopDivideAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:LoopDivideAnalyzer	access:public	signature:()
startAnalyze	include/MemApplyAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:MemApplyAnalyzer	access:public	signature:()
startAnalyze	include/MultiConditionAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:MultiConditionAnalyzer	access:public	signature:()
startAnalyze	include/MultiplyByTwosExponentAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:()
startAnalyze	include/RealDivisionAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:RealDivisionAnalyzer	access:public	signature:()
startAnalyze	include/SqrtAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:SqrtAnalyzer	access:public	signature:()
startAnalyze	include/StringCopyAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:StringCopyAnalyzer	access:public	signature:()
startAnalyze	include/StructSizeAnalyzer.h	/^	virtual void startAnalyze();$/;"	p	class:StructSizeAnalyzer	access:public	signature:()
stmtNode	include/ForLoopToZeroAnalyzer.h	/^	GNode *stmtNode;$/;"	m	class:ForLoopToZeroAnalyzer	access:private
structMap	include/StructSizeAnalyzer.h	/^  map <string, bool > structMap;$/;"	m	class:StructSizeAnalyzer	access:private
threshold	include/FunctionCodeSizeAnalyzer.h	/^	int threshold;$/;"	m	class:FunctionCodeSizeAnalyzer	access:private
threshold	include/LocalVarSizeAnalyzer.h	/^	int threshold;$/;"	m	class:LocalVarSizeAnalyzer	access:private
threshold	include/LoopDivideAnalyzer.h	/^	int threshold;$/;"	m	class:LoopDivideAnalyzer	access:private
threshold	include/MultiConditionAnalyzer.h	/^	int threshold = 3;$/;"	m	class:MultiConditionAnalyzer	access:private
totalGlobalVarSize	include/GlobalVarSizeAnalyzer.h	/^	unsigned long totalGlobalVarSize, codeLocation;$/;"	m	class:GlobalVarSizeAnalyzer	access:private
totalLocalVarSize	include/LocalVarSizeAnalyzer.h	/^	unsigned long totalLocalVarSize;$/;"	m	class:LocalVarSizeAnalyzer	access:private
truth_and_or_if_expr	MultiConditionAnalyzer.cpp	/^int truth_and_or_if_expr(GNode * node){$/;"	f	signature:(GNode * node)
truth_and_or_if_expr	include/MultiConditionAnalyzer.h	/^    int truth_and_or_if_expr(GNode * node);$/;"	p	class:MultiConditionAnalyzer	access:public	signature:(GNode * node)
varId	include/IfToSwitchAnalyzer.h	/^		int varId;$/;"	m	struct:IfToSwitchAnalyzer::conditionNode	access:public
~AssignToConstantAnalyzer	AssignToConstantAnalyzer.cpp	/^AssignToConstantAnalyzer::~AssignToConstantAnalyzer()$/;"	f	class:AssignToConstantAnalyzer	signature:()
~AssignToConstantAnalyzer	include/AssignToConstantAnalyzer.h	/^	virtual ~AssignToConstantAnalyzer();$/;"	p	class:AssignToConstantAnalyzer	access:public	signature:()
~BadMemOperationCallAnalyzer	BadMemOperationCallAnalyzer.cpp	/^BadMemOperationCallAnalyzer::~BadMemOperationCallAnalyzer()$/;"	f	class:BadMemOperationCallAnalyzer	signature:()
~BadMemOperationCallAnalyzer	include/BadMemOperationCallAnalyzer.h	/^	virtual ~BadMemOperationCallAnalyzer();$/;"	p	class:BadMemOperationCallAnalyzer	access:public	signature:()
~BitNotExprAnalyzer	BitNotExprAnalyzer.cpp	/^BitNotExprAnalyzer::~BitNotExprAnalyzer(){$/;"	f	class:BitNotExprAnalyzer	signature:()
~BitNotExprAnalyzer	include/BitNotExprAnalyzer.h	/^	virtual ~BitNotExprAnalyzer();$/;"	p	class:BitNotExprAnalyzer	access:public	signature:()
~ConditionInLoopAnalyzer	ConditionInLoopAnalyzer.cpp	/^ConditionInLoopAnalyzer::~ConditionInLoopAnalyzer(){$/;"	f	class:ConditionInLoopAnalyzer	signature:()
~ConditionInLoopAnalyzer	include/ConditionInLoopAnalyzer.h	/^	virtual ~ConditionInLoopAnalyzer();$/;"	p	class:ConditionInLoopAnalyzer	access:public	signature:()
~DivideByTwosExponentAnalyzer	DivideByTwosExponentAnalyzer.cpp	/^DivideByTwosExponentAnalyzer::~DivideByTwosExponentAnalyzer()$/;"	f	class:DivideByTwosExponentAnalyzer	signature:()
~DivideByTwosExponentAnalyzer	include/DivideByTwosExponentAnalyzer.h	/^	virtual ~DivideByTwosExponentAnalyzer();$/;"	p	class:DivideByTwosExponentAnalyzer	access:public	signature:()
~FindSameFunctionAnalyzer	FindSameFunctionAnalyzer.cpp	/^FindSameFunctionAnalyzer::~FindSameFunctionAnalyzer() {$/;"	f	class:FindSameFunctionAnalyzer	signature:()
~FindSameFunctionAnalyzer	include/FindSameFunctionAnalyzer.h	/^	 ~FindSameFunctionAnalyzer();$/;"	p	class:FindSameFunctionAnalyzer	access:private	signature:()
~ForLoopCombineAnalyzer	ForLoopCombineAnalyzer.cpp	/^ForLoopCombineAnalyzer::~ForLoopCombineAnalyzer(){$/;"	f	class:ForLoopCombineAnalyzer	signature:()
~ForLoopCombineAnalyzer	include/ForLoopCombineAnalyzer.h	/^	virtual ~ForLoopCombineAnalyzer();$/;"	p	class:ForLoopCombineAnalyzer	access:public	signature:()
~ForLoopToZeroAnalyzer	ForLoopToZeroAnalyzer.cpp	/^ForLoopToZeroAnalyzer::~ForLoopToZeroAnalyzer(){$/;"	f	class:ForLoopToZeroAnalyzer	signature:()
~ForLoopToZeroAnalyzer	include/ForLoopToZeroAnalyzer.h	/^	virtual ~ForLoopToZeroAnalyzer();$/;"	p	class:ForLoopToZeroAnalyzer	access:public	signature:()
~FunctionAsLoopVarAnalyzer	FunctionAsLoopVarAnalyzer.cpp	/^FunctionAsLoopVarAnalyzer::~FunctionAsLoopVarAnalyzer()$/;"	f	class:FunctionAsLoopVarAnalyzer	signature:()
~FunctionAsLoopVarAnalyzer	include/FunctionAsLoopVarAnalyzer.h	/^	virtual ~FunctionAsLoopVarAnalyzer();$/;"	p	class:FunctionAsLoopVarAnalyzer	access:public	signature:()
~FunctionCallAnalyzer	FunctionCallAnalyzer.cpp	/^FunctionCallAnalyzer::~FunctionCallAnalyzer()$/;"	f	class:FunctionCallAnalyzer	signature:()
~FunctionCallAnalyzer	include/FunctionCallAnalyzer.h	/^	virtual ~FunctionCallAnalyzer();$/;"	p	class:FunctionCallAnalyzer	access:public	signature:()
~FunctionCodeSizeAnalyzer	FunctionCodeSizeAnalyzer.cpp	/^FunctionCodeSizeAnalyzer::~FunctionCodeSizeAnalyzer() {$/;"	f	class:FunctionCodeSizeAnalyzer	signature:()
~FunctionCodeSizeAnalyzer	include/FunctionCodeSizeAnalyzer.h	/^	virtual ~FunctionCodeSizeAnalyzer();$/;"	p	class:FunctionCodeSizeAnalyzer	access:public	signature:()
~GeAndLeCondAnalyzer	GeAndLeCondAnalyzer.cpp	/^GeAndLeCondAnalyzer::~GeAndLeCondAnalyzer()$/;"	f	class:GeAndLeCondAnalyzer	signature:()
~GeAndLeCondAnalyzer	include/GeAndLeCondAnalyzer.h	/^	virtual ~GeAndLeCondAnalyzer();$/;"	p	class:GeAndLeCondAnalyzer	access:public	signature:()
~GlobalVarSizeAnalyzer	GlobalVarSizeAnalyzer.cpp	/^GlobalVarSizeAnalyzer::~GlobalVarSizeAnalyzer(){$/;"	f	class:GlobalVarSizeAnalyzer	signature:()
~GlobalVarSizeAnalyzer	include/GlobalVarSizeAnalyzer.h	/^	virtual ~GlobalVarSizeAnalyzer();$/;"	p	class:GlobalVarSizeAnalyzer	access:public	signature:()
~IfToSwitchAnalyzer	IfToSwitchAnalyzer.cpp	/^IfToSwitchAnalyzer::~IfToSwitchAnalyzer(){$/;"	f	class:IfToSwitchAnalyzer	signature:()
~IfToSwitchAnalyzer	include/IfToSwitchAnalyzer.h	/^	virtual ~IfToSwitchAnalyzer();$/;"	p	class:IfToSwitchAnalyzer	access:public	signature:()
~InitializeArrayByForLoopAnalyzer	InitializeArrayByForLoopAnalyzer.cpp	/^InitializeArrayByForLoopAnalyzer::~InitializeArrayByForLoopAnalyzer()$/;"	f	class:InitializeArrayByForLoopAnalyzer	signature:()
~InitializeArrayByForLoopAnalyzer	include/InitializeArrayByForLoopAnalyzer.h	/^	virtual ~InitializeArrayByForLoopAnalyzer();$/;"	p	class:InitializeArrayByForLoopAnalyzer	access:public	signature:()
~LocalVarSizeAnalyzer	LocalVarSizeAnalyzer.cpp	/^LocalVarSizeAnalyzer::~LocalVarSizeAnalyzer() {$/;"	f	class:LocalVarSizeAnalyzer	signature:()
~LocalVarSizeAnalyzer	include/LocalVarSizeAnalyzer.h	/^	virtual ~LocalVarSizeAnalyzer();$/;"	p	class:LocalVarSizeAnalyzer	access:public	signature:()
~LoopDivideAnalyzer	LoopDivideAnalyzer.cpp	/^LoopDivideAnalyzer::~LoopDivideAnalyzer() {$/;"	f	class:LoopDivideAnalyzer	signature:()
~LoopDivideAnalyzer	include/LoopDivideAnalyzer.h	/^	virtual ~LoopDivideAnalyzer();$/;"	p	class:LoopDivideAnalyzer	access:public	signature:()
~MemApplyAnalyzer	MemApplyAnalyzer.cpp	/^MemApplyAnalyzer::~MemApplyAnalyzer(){$/;"	f	class:MemApplyAnalyzer	signature:()
~MemApplyAnalyzer	include/MemApplyAnalyzer.h	/^	virtual ~MemApplyAnalyzer();$/;"	p	class:MemApplyAnalyzer	access:public	signature:()
~MultiConditionAnalyzer	MultiConditionAnalyzer.cpp	/^MultiConditionAnalyzer::~MultiConditionAnalyzer() {$/;"	f	class:MultiConditionAnalyzer	signature:()
~MultiConditionAnalyzer	include/MultiConditionAnalyzer.h	/^	virtual ~MultiConditionAnalyzer();$/;"	p	class:MultiConditionAnalyzer	access:public	signature:()
~MultiplyByTwosExponentAnalyzer	MultiplyByTwosExponentAnalyzer.cpp	/^MultiplyByTwosExponentAnalyzer::~MultiplyByTwosExponentAnalyzer()$/;"	f	class:MultiplyByTwosExponentAnalyzer	signature:()
~MultiplyByTwosExponentAnalyzer	include/MultiplyByTwosExponentAnalyzer.h	/^	virtual ~MultiplyByTwosExponentAnalyzer();$/;"	p	class:MultiplyByTwosExponentAnalyzer	access:public	signature:()
~RealDivisionAnalyzer	RealDivisionAnalyzer.cpp	/^RealDivisionAnalyzer::~RealDivisionAnalyzer(){$/;"	f	class:RealDivisionAnalyzer	signature:()
~RealDivisionAnalyzer	include/RealDivisionAnalyzer.h	/^	virtual ~RealDivisionAnalyzer();$/;"	p	class:RealDivisionAnalyzer	access:public	signature:()
~SqrtAnalyzer	SqrtAnalyzer.cpp	/^SqrtAnalyzer::~SqrtAnalyzer(){$/;"	f	class:SqrtAnalyzer	signature:()
~SqrtAnalyzer	include/SqrtAnalyzer.h	/^	virtual ~SqrtAnalyzer();$/;"	p	class:SqrtAnalyzer	access:public	signature:()
~StringCopyAnalyzer	StringCopyAnalyzer.cpp	/^StringCopyAnalyzer::~StringCopyAnalyzer()$/;"	f	class:StringCopyAnalyzer	signature:()
~StringCopyAnalyzer	include/StringCopyAnalyzer.h	/^	virtual ~StringCopyAnalyzer();$/;"	p	class:StringCopyAnalyzer	access:public	signature:()
~StructSizeAnalyzer	StructSizeAnalyzer.cpp	/^StructSizeAnalyzer::~StructSizeAnalyzer() {$/;"	f	class:StructSizeAnalyzer	signature:()
~StructSizeAnalyzer	include/StructSizeAnalyzer.h	/^	virtual ~StructSizeAnalyzer();$/;"	p	class:StructSizeAnalyzer	access:public	signature:()
