#include "../include/TotalProblem.h"
#include "../../util/include/TotalProblemHtml.h"
#include "../../util/include/Util.h"
#include <vector>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <sql.h>
#include <sqlext.h>
#include <sqltypes.h>

using namespace std;

void ProblemClass::Print()
{
    cout << name << ":" << count << endl;
    problem *p = head;
    for(; p; p = p->next)
    {
	p->Print();
    }
}

void ProblemList::Init()
{
    FILE *fp = freopen(PROBLEM_CONFIG, "r", stdin);
    if(NULL == fp)
    {
	cout << "cannot open config file: " << PROBLEM_CONFIG << endl;
	return;
    }
    char tempStr[50];
    char flagOn[5];
    while(EOF != scanf("%s %s", tempStr, flagOn))
    {
	string temp(flagOn);
	if("On" == temp)
	{
	    ProblemClass *tempPC = new ProblemClass;
	    tempPC->SetCount(0);
	    tempPC->SetName(tempStr);
	    tempPC->SetLink(NULL);
	    vec_pro.push_back(*tempPC);
	}
    }
    fclose(fp);
}

void ProblemList::Add(char *prob, string fileName, int line)
{
    string str(prob);

    for(int i = 0; i < vec_pro.size(); i++)
    {
	if(str == vec_pro[i].GetName())
	{
	    struct problem *temp = new struct problem;
	    temp->fileName = fileName;
	    temp->line = line;
	    temp->next = vec_pro[i].GetHead();
	    vec_pro[i].SetHead(temp);
	    vec_pro[i].SetCount(vec_pro[i].GetCount() + 1);
	    break;
	}
    }
}

void ProblemList::Print()
{
    for(int i = 0; i < vec_pro.size(); i++)
    {
	vec_pro[i].Print();
    }
}

void ProblemList::AmendRelativeName()
{
    string pwd(proj_name);
    cout << "project name:" << proj_name << endl;
    for(int i = 0; i < vec_pro.size(); i++)
    {
	problem *p = vec_pro[i].GetHead();
	for(; p; p = p->next)
	{
	    string name;
	    name = p->fileName;
	    string pwd_backup;
	    pwd_backup = pwd;
	    int pos, pos1;
	    pos = name.find('/');
	    pos1 = pwd_backup.find('/');
	    while(string::npos != pos && string::npos != pos1)
	    {
		if(pos != pos1)
		    break;
		bool quit;
		quit = false;
		for(int j = 0; j <= pos; j++)
		{
		    if(name[j] != pwd_backup[j])
		    {
			quit = true;
			break;
		    }
		}
		if(true == quit)
		    break;
		name = name.substr(pos + 1);
		pwd_backup = pwd_backup.substr(pos + 1);
		pos = name.find('/');
		pos1 = pwd_backup.find('/');
	    }
#if 1
	    string result_name;
	    result_name = "./";
	    int num = 0;
	    for(int k = 0; k < pwd_backup.size(); k++)
	    {
		if('/' == pwd_backup[k])
		    num++;
	    }
	    for(int k = 0; k < num; k++)
	    {
		result_name += "../";
	    }
	    result_name += name;
	    p->fileName = result_name;
#endif
	}
    }
}

string ProblemList::GetCommonDir(string a, string b)
{
    int pos = 1;
    int new_pos;
    bool quit = false;
    string common_dir = "/";
    while((new_pos = a.find('/', pos)) == b.find('/', pos) && new_pos > 0)
    {
	for(int i = pos; i <= new_pos; i++)
	{
	    if(a[i] != b[i])
	    {
		quit = true;
		break;
	    }
	}
	if(true == quit)
	{
	    break;
	}
	common_dir = a.substr(0, new_pos + 1);
	pos = new_pos + 1;
    }
    return common_dir;
}

void ProblemList::PrintCommonDirForDirs()
{
    for(int i = 0; i < vec_pro.size(); i++)
    {
	cout << vec_pro[i].GetName() << endl;
    }
}

void ProblemList::DeduceProjName()
{
    string common_dir = "";
    for(int i = 0; i < vec_pro.size(); i++)
    {
	for(problem *p = vec_pro[i].GetHead(); p; p = p->next)
	{
	    if("" == common_dir)
		common_dir = p->fileName;
	    else
		common_dir = GetCommonDir(common_dir, p->fileName);
	}
    }
    proj_name = common_dir;
}



ProblemList* ProblemList::mProblemList = NULL;

ProblemList&
ProblemList::GetInstance()
{
    if(NULL == mProblemList)
	mProblemList = new ProblemList;
    return *mProblemList;
}

void ProblemList::OutputHtml()
{
    ofstream of;
    of.open(OUTPUT_HTML);
    TotalProblemHtml tph;
    tph.ConstructHeader();
    tph.StartScript();
    tph.StartBody();
    for(int i = 0; i < vec_pro.size(); i++)
    {
	char buf[10];
	tph.ConstructD(vec_pro[i].GetName());
	tph.ConstructD2(vec_pro[i].GetName());
	tph.ConstructUse(vec_pro[i].GetName());
	sprintf(buf, "%d", vec_pro[i].GetCount());
	string temp(buf);
	string str = vec_pro[i].GetName() + ": " + temp;
	tph.AddBodyHead(str);
	problem *p = vec_pro[i].GetHead();
	tph.Span(vec_pro[i].GetName());
	tph.StartParagraph(vec_pro[i].GetName());
	for(; p; p = p->next)
	{
	    string str = p->fileName;
	    tph.ConstructBodyLine(str, p->line);
	}
	tph.EndParagraph();
	//tph.Span(vec_pro[i].GetName());
	str.clear();
	temp.clear();
    }
    tph.EndScript();
    tph.EndBody();
    tph.ConstructFooter();
    tph.Output(of);
    of.close();
}

void ProblemList::CalcDirPro()
{
    for(int i = 0; i < vec_pro.size(); i++)
    {
	problem *p = vec_pro[i].GetHead();
	for(; p; p = p->next)
	{
	    problem tempPro = *p;
	    int pos = tempPro.fileName.rfind('/');
	    string tempStr;
	    tempStr = tempPro.fileName.substr(0, pos);
	    bool flag = false, flag1 = false;
	    for(int j = 0; j < vec_dir_pro.size(); j++)
	    {
		if(vec_dir_pro[j].dirName == tempStr)
		{
		    vec_dir_pro[j].errCount++;
		    flag1 = true;
		}
		if(vec_dir_pro[j].dirName == tempPro.fileName)
		{
		    vec_dir_pro[j].errCount++;
		    flag = true;
		}
	    }
	    if(false == flag)
	    {
		DirProblem dp(tempPro.fileName);
		vec_dir_pro.push_back(dp);
	    }
	    if(false == flag1)
	    {
		DirProblem dp(tempStr);
		vec_dir_pro.push_back(dp);
	    }
	}
    }
}

void ProblemList::PrintDirPro()
{
    for(int i = 0; i < vec_dir_pro.size(); i++)
    {
	cout << "dir " << vec_dir_pro[i].dirName << " exist " << vec_dir_pro[i].errCount << " problem" << endl;
    }
}

void ProblemList::CalcFilePro()
{
    for(int i = 0; i < vec_pro.size(); i++)
    {
	problem *p = vec_pro[i].GetHead();
	for(; p; p = p->next)
	{
	    bool flag = false;
	    for(int j = 0; j < vec_file_pro.size(); j++)
	    {
		if(vec_file_pro[j].fileName == p->fileName && vec_file_pro[j].analyzer == vec_pro[i].GetName())
		{
		    vec_file_pro[j].err_num++;
		    flag = true;
		}
	    }
	    if(false == flag)
	    {
		FileProblem fp(p->fileName, vec_pro[i].GetName(), 1);
		vec_file_pro.push_back(fp);
	    }
	    flag = false;
	}
    }
}

void ProblemList::PrintFilePro()
{
    for(int i = 0; i < vec_file_pro.size(); i++)
    {
	cout << "file: " << vec_file_pro[i].fileName << " analyzer: " << vec_file_pro[i].analyzer << " errors: " << vec_file_pro[i].err_num << endl;
    }
}

int ProblemList::GenerateNewProjID(vector<int> vec_old_proj_id)
{
    int new_proj_id = 1;
    for(int i = 0; i < vec_old_proj_id.size(); i++)
    {
	if(vec_old_proj_id[i] >= new_proj_id)
	    new_proj_id = vec_old_proj_id[i] + 1;
    }
    return new_proj_id;
}

void ProblemList::ReportFileProToDB(int iSid)
{
    SQLHENV odbc_env;
    long odbc_erg;
    SQLHDBC odbc_hl_con;
    char sql_stat[10];
    SQLINTEGER odbc_err, odbc_rowanz, odbc_id, odbc_err_count, odbc_sid;
    SQLSMALLINT odbc_len, odbc_colanz, odbc_proj_id;
    SQLTIMESTAMP odbc_time;
    odbc_sid = (SQLINTEGER) iSid;
    

    
    char odbc_buffer[200], odbc_analyzer[200], odbc_proj_name[200], odbc_user[200];

    odbc_erg = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &odbc_env);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "Error AllocHandle of odbc" << endl;
	return;
    }

    odbc_erg = SQLSetEnvAttr(odbc_env, SQL_ATTR_ODBC_VERSION, (void*) SQL_OV_ODBC3, 0);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "Error set environment of odbc" << endl;
	return;
    }
    
    odbc_erg = SQLAllocHandle(SQL_HANDLE_DBC, odbc_env, &odbc_hl_con);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "Error alloc odbc connection handler." << endl;
	return;
    }
   
    SQLSetConnectAttr(odbc_hl_con, SQL_LOGIN_TIMEOUT, (SQLPOINTER*)5, 0);
    odbc_erg = SQLConnect(odbc_hl_con, (SQLCHAR*) "huawei", SQL_NTS, (SQLCHAR*) "huawei", SQL_NTS, (SQLCHAR*) "huawei", SQL_NTS);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "Error SQL connection." << odbc_erg << endl;
	//SQLGetDiagRec(SQL_HANDLE_DBC, odbc_hl_con, 1, (SQL_CHAR*) odbc_stat, &odbc_err, (SQLCHAR*) odbc_msg, &odbc_len);
	SQLFreeHandle(SQL_HANDLE_ENV, odbc_env);
	return;
    }

    cout << "Connected to database" << endl;
    SQLHSTMT odbc_hl_stmt;
    odbc_erg = SQLAllocHandle(SQL_HANDLE_STMT, odbc_hl_con, &odbc_hl_stmt);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "fail in allocating statement." << endl;
	SQLFreeHandle(SQL_HANDLE_ENV, odbc_env);
	return;
    }
    
    
    //bind segments of table which count the errors for every directory
    SQLBindCol(odbc_hl_stmt, 1, SQL_C_ULONG, &odbc_sid, 150, &odbc_err);
    SQLBindCol(odbc_hl_stmt, 2, SQL_C_CHAR, &odbc_buffer, 255, &odbc_err);
    SQLBindCol(odbc_hl_stmt, 3, SQL_C_ULONG, &odbc_err_count, 150, &odbc_err);
    
    //insert into the table the errors for every directory
    //temp_time = Util::intToString(p->
    for(int i = 0; i < vec_dir_pro.size(); i++)
    {
	string tempStr;
	tempStr = "insert into SubmitFile value(" + Util::intToString(iSid) + ", '" + vec_dir_pro[i].dirName + "', " + Util::intToString(vec_dir_pro[i].errCount) + ")";
	cout << tempStr << endl;
	odbc_erg = SQLExecDirect(odbc_hl_stmt, (SQLCHAR*) tempStr.c_str(), SQL_NTS);
    }

    //odbc_erg = SQLExecDirect(odbc_hl_stmt, (SQLCHAR*) "insert into node(name, type, error_num) value('yangyi', 'b', 3)", SQL_NTS);
#if 1
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "fail to insert data into file." << endl;
	SQLFreeHandle(SQL_HANDLE_STMT, odbc_hl_stmt);
	SQLFreeHandle(SQL_HANDLE_ENV, odbc_env);
	SQLDisconnect(odbc_hl_con);
	SQLFreeHandle(SQL_HANDLE_DBC, odbc_hl_con);
	return;
    }
    cout << "success to insert." << endl;
#endif
    
    //shut down the first connection, and connect to table 'problem'
    
    SQLFreeHandle(SQL_HANDLE_ENV, odbc_env);
    SQLDisconnect(odbc_hl_con);
    SQLFreeHandle(SQL_HANDLE_DBC, odbc_hl_con);
    SQLFreeHandle(SQL_HANDLE_STMT, odbc_hl_stmt);
}

void ProblemList::ReportAnalyzerProToDB(int iSid)
{
    SQLHENV odbc_env;
    long odbc_erg;
    SQLHDBC odbc_hl_con;
    char sql_stat[10];
    SQLINTEGER odbc_err, odbc_rowanz, odbc_id, odbc_err_count, odbc_proj_id;
    SQLSMALLINT odbc_len, odbc_colanz;
    SQLTIMESTAMP odbc_time;
    
    char odbc_file_name[200], odbc_analyzer[200], odbc_proj_name[255], odbc_user[255];

    odbc_erg = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &odbc_env);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "Error AllocHandle of odbc" << endl;
	return;
    }

    odbc_erg = SQLSetEnvAttr(odbc_env, SQL_ATTR_ODBC_VERSION, (void*) SQL_OV_ODBC3, 0);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "Error set environment of odbc" << endl;
	return;
    }
    
    odbc_erg = SQLAllocHandle(SQL_HANDLE_DBC, odbc_env, &odbc_hl_con);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "Error alloc odbc connection handler." << endl;
	return;
    }
   
    SQLSetConnectAttr(odbc_hl_con, SQL_LOGIN_TIMEOUT, (SQLPOINTER*)5, 0);
    odbc_erg = SQLConnect(odbc_hl_con, (SQLCHAR*) "huawei", SQL_NTS, (SQLCHAR*) "huawei", SQL_NTS, (SQLCHAR*) "huawei", SQL_NTS);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "Error SQL connection." << odbc_erg << endl;
	//SQLGetDiagRec(SQL_HANDLE_DBC, odbc_hl_con, 1, (SQL_CHAR*) odbc_stat, &odbc_err, (SQLCHAR*) odbc_msg, &odbc_len);
	SQLFreeHandle(SQL_HANDLE_ENV, odbc_env);
	return;
    }

    cout << "Connected to database" << endl;

    //visit Analyzer table to get analyzer id for analyzer name, ex. id of IfToIfelseAnalyzer: 3

    //insert records for every analyzer's detection
    SQLHSTMT odbc_hl_stmt;
    odbc_erg = SQLAllocHandle(SQL_HANDLE_STMT, odbc_hl_con, &odbc_hl_stmt);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "fail in allocating statement." << endl;
	SQLFreeHandle(SQL_HANDLE_ENV, odbc_env);
	return;
    }
    //bind segments of table which count the errors for every directory
    SQLBindCol(odbc_hl_stmt, 1, SQL_C_LONG, &iSid, 150, &odbc_err);
    SQLBindCol(odbc_hl_stmt, 2, SQL_C_CHAR, &odbc_file_name, 255, &odbc_err);
    SQLBindCol(odbc_hl_stmt, 3, SQL_C_CHAR, &odbc_analyzer, 150, &odbc_err);
    SQLBindCol(odbc_hl_stmt, 4, SQL_C_ULONG, &odbc_err_count, 150, &odbc_err);
#if 0
    SQLHSTMT odbc_hl_stmt_cp = odbc_hl_stmt;
    SQLExecDirect(odbc_hl_stmt, (SQLCHAR*) "select * from problem", SQL_NTS);
    odbc_erg = SQLFetch(odbc_hl_stmt);
    vector<FileProblem> vec_fp_original;
    while(SQL_NO_DATA != odbc_erg)
    {
	cout << "name: " << odbc_buffer << " analyzer: " << odbc_analyzer << " error_num: " << odbc_err_count << endl;
	string tempFile(odbc_buffer);
	string tempAnalyzer(odbc_analyzer);
	unsigned int err_count = odbc_err_count;
	FileProblem fp(tempFile, tempAnalyzer, err_count);
	vec_fp_original.push_back(fp);
	//printf("name: %s type: %d error_num: %d\n", odbc_buffer, odbc_id, odbc_err_count);
	odbc_erg = SQLFetch(odbc_hl_stmt);
    }
    odbc_hl_stmt = odbc_hl_stmt_cp;
    SQLFreeHandle(SQL_HANDLE_STMT, odbc_hl_stmt);
    odbc_erg = SQLAllocHandle(SQL_HANDLE_STMT, odbc_hl_con, &odbc_hl_stmt);
    SQLBindCol(odbc_hl_stmt, 1, SQL_C_CHAR, &odbc_buffer, 255, &odbc_err);
    SQLBindCol(odbc_hl_stmt, 2, SQL_C_CHAR, &odbc_analyzer, 150, &odbc_err);
    SQLBindCol(odbc_hl_stmt, 3, SQL_C_ULONG, &odbc_err_count, 150, &odbc_err);
#endif
#if 0
    //compute the difference between the original and in-hand one
    vector<FileDiff> vec_file_diff;

    vector<FileProblem> vec_file_pro_back;
    vec_file_pro_back = vec_file_pro;

    for(vector<FileProblem>::iterator iter = vec_fp_original.end() - 1; iter != vec_fp_original.begin() - 1; iter--)
    {
	for(vector<FileProblem>::iterator j_iter = vec_file_pro_back.end() - 1; j_iter != vec_file_pro_back.begin() - 1; j_iter--)
	{
	    if(*iter == *j_iter)
	    {
		vec_fp_original.erase(iter);
		vec_file_pro_back.erase(j_iter);
	    }
	    if(*iter ^= *j_iter)
	    {
		FileDiff fd;
		fd.fileName = iter->fileName;
		fd.analyzer = iter->analyzer;
		fd.original = iter->err_num;
		fd.current = j_iter->err_num;
		vec_file_diff.push_back(fd);
	    }
	}
    }
    for(vector<FileProblem>::iterator iter = vec_fp_original.end() - 1; iter != vec_fp_original.begin() - 1; iter--)
    {
	FileDiff fd;
	fd.fileName = iter->fileName;
	fd.analyzer = iter->analyzer;
	fd.original = iter->err_num;
	fd.current = 0;
	vec_file_diff.push_back(fd);
    }
    for(vector<FileProblem>::iterator iter = vec_file_pro_back.end() - 1; iter != vec_file_pro_back.begin() -1; iter--)
    {
	FileDiff fd;
	fd.fileName = iter->fileName;
	fd.analyzer = iter->analyzer;
	fd.original = 0;
	fd.current = iter->err_num;
	vec_file_diff.push_back(fd);
    }
    for(int i = 0; i < vec_file_diff.size(); i++)
    {
	vec_file_diff[i].Print();
    }
    cout << "There are " << vec_file_diff.size() << " difference." << endl;

    //insert the problem difference records into table 'problemdiff'

    SQLHSTMT odbc_hl_stmt_diff;
    odbc_erg = SQLAllocHandle(SQL_HANDLE_STMT, odbc_hl_con, &odbc_hl_stmt_diff);
    char odbc_file_diff[255], odbc_analyzer_diff[200];
    unsigned int odbc_original_diff, odbc_current_diff;
    SQLBindCol(odbc_hl_stmt_diff, 1, SQL_C_CHAR, &odbc_file_diff, 255, &odbc_err);
    SQLBindCol(odbc_hl_stmt_diff, 2, SQL_C_CHAR, &odbc_analyzer_diff, 255, &odbc_err);
    SQLBindCol(odbc_hl_stmt_diff, 3, SQL_C_ULONG, &odbc_original_diff, 10, &odbc_err);
    SQLBindCol(odbc_hl_stmt_diff, 4, SQL_C_ULONG, &odbc_current_diff, 10, &odbc_err);
    

    odbc_erg = SQLExecDirect(odbc_hl_stmt, (SQLCHAR*) "delete from problemdiff", SQL_NTS);
    for(int i = 0; i < vec_file_diff.size(); i++)
    {
	string tempStr = "insert into problemdiff(fileName, analyzer, original, current) value('" + vec_file_diff[i].fileName + "', '" + vec_file_diff[i].analyzer+ "', " + Util::intToString((int)vec_file_diff[i].original) + ", " + Util::intToString((int)vec_file_diff[i].current) + ")";
	odbc_erg = SQLExecDirect(odbc_hl_stmt, (SQLCHAR*) tempStr.c_str(), SQL_NTS);
    }
    
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "fail to insert into problemdiff" << endl;
    }


#endif 
#if 0
    odbc_erg = SQLExecDirect(odbc_hl_stmt, (SQLCHAR*) "delete from problem", SQL_NTS);
    if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
    {
	cout << "fail to delete from problem" << endl;
	//SQLGetDiagRec(SQL_HANDLE_DBC, odbc_hl_con, 1, (SQLCHAR*) odbc_stat, &odbc_err, (SQLCHAR*) odbc_msg, 100, &odbc_len);
	cout << odbc_erg << endl;
    }
#endif
    //insert into the table the errors for every directory
    //cout << endl << endl << vec_file_pro.size() << endl << endl;
    

    for(int i = 0; i < vec_file_pro.size(); i++)
    {
	SQLINTEGER odbc_aid;
	char analyzer_name[255];
	SQLHSTMT odbc_hl_get_analyzer_id_stmt;
	odbc_erg = SQLAllocHandle(SQL_HANDLE_STMT, odbc_hl_con, &odbc_hl_get_analyzer_id_stmt);
	if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
	{
	    cout << "fail in allocating statement." << endl;
	    SQLFreeHandle(SQL_HANDLE_ENV, odbc_env);
	    return;
	}
	//bind segments of table which count the errors for every directory
	SQLBindCol(odbc_hl_get_analyzer_id_stmt, 1, SQL_C_LONG, &odbc_aid, 150, &odbc_err);
	SQLBindCol(odbc_hl_get_analyzer_id_stmt, 2, SQL_C_CHAR, &analyzer_name, 255, &odbc_err);

	string strGetAnalyzerId;
	strGetAnalyzerId = "select * from Analyzer where name='" + vec_file_pro[i].analyzer + "'";
	cout << strGetAnalyzerId << endl;
	odbc_erg = SQLExecDirect(odbc_hl_get_analyzer_id_stmt, (SQLCHAR*) strGetAnalyzerId.c_str(), SQL_NTS);
	odbc_erg = SQLFetch(odbc_hl_get_analyzer_id_stmt);
	
	cout << "aid: " << (int) odbc_aid << endl;

	if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
	{
	    cout << "fail to select from Analyzer." << endl;
	    SQLFreeHandle(SQL_HANDLE_STMT, odbc_hl_get_analyzer_id_stmt);
	    SQLFreeHandle(SQL_HANDLE_ENV, odbc_env);
	    SQLDisconnect(odbc_hl_con);
	    SQLFreeHandle(SQL_HANDLE_DBC, odbc_hl_con);
	    return;
	}

	string tempStr;
	tempStr = "insert into AnalyzeResult value(" + Util::intToString(iSid) + ", '" + vec_file_pro[i].fileName + "', " + Util::intToString((int) odbc_aid) + ", " + Util::intToString(vec_file_pro[i].err_num) + ")";
	cout << tempStr << vec_file_pro[i].analyzer << endl;
	odbc_erg = SQLExecDirect(odbc_hl_stmt, (SQLCHAR*) tempStr.c_str(), SQL_NTS);
	if((SQL_SUCCESS != odbc_erg) && (SQL_SUCCESS_WITH_INFO != odbc_erg))
	{
	    cout << "fail to insert data into AnalyzeResult." << endl;
	    SQLFreeHandle(SQL_HANDLE_STMT, odbc_hl_stmt);
	    SQLFreeHandle(SQL_HANDLE_ENV, odbc_env);
	    SQLDisconnect(odbc_hl_con);
	    SQLFreeHandle(SQL_HANDLE_DBC, odbc_hl_con);
	    return;
	}
	cout << "success to insert." << endl;
    }


#if 0
    odbc_erg = SQLFetch(odbc_hl_stmt);
    while(SQL_NO_DATA != odbc_erg)
    {
	cout << "name: " << odbc_buffer << " type: " << odbc_id << " error_num: " << odbc_err_count << endl;
	//printf("name: %s type: %d error_num: %d\n", odbc_buffer, odbc_id, odbc_err_count);
	odbc_erg = SQLFetch(odbc_hl_stmt);
    }
#endif
    //shut down the first connection, and connect to table 'problem'
    SQLFreeHandle(SQL_HANDLE_STMT, odbc_hl_stmt);
    SQLDisconnect(odbc_hl_con);
    SQLFreeHandle(SQL_HANDLE_DBC, odbc_hl_con);
    SQLFreeHandle(SQL_HANDLE_ENV, odbc_env);
    SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &odbc_env);
}
