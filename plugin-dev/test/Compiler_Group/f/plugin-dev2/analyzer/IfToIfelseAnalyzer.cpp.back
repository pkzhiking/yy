#include "include/IfToIfelseAnalyzer.h"
#include "../core/include/NodeProcessor.h"
#include "../util/include/Logger.h"
#include "../core/include/SrcManager.h"
#include "../core/include/ContextProcessor.h"
#include "../core/include/VarNodeProcessor.h"
#include "../core/include/ReportManager.h"
#include "../core/include/TotalProblem.h"
#include "../util/include/Util.h"

IfToIfelseAnalyzer::IfToIfelseAnalyzer()
{
    setAnalyzerNodeType("cond_expr");
}

IfToIfelseAnalyzer::~IfToIfelseAnalyzer()
{
}

void IfToIfelseAnalyzer::startAnalyze()
{
}


void IfToIfelseAnalyzer::finishAnalyze()
{
    if(mConditionNodeVector.size() < 2)
	return ;
    vector<int> conSet;
    conSet.clear();
    conSet.push_back(0);
    vector<conditionNode>::iterator iter = mConditionNodeVector.begin();

    for(int id = 1; iter != mConditionNodeVector.end(); iter++, id++)
    {
	if(iter->varId == (iter -1)->varId)
	{
	    conSet.push_back(id);
	}
	else
	{
	    isIfToIfelse(conSet);
	    conSet.clear();
	    conSet.push_back(id);
	}
    }
    isIfToIfelse(conSet);
}

void IfToIfelseAnalyzer::analyzeNode(GNode *node, vector<int> &context)
{
    conditionNode conNode;
    conNode.varId = NodeProcessor::getConditionVarID(node);

    if(-1 == conNode.varId)
    {
	return ;
    }

    conNode.node = node;
    conNode.iContextLine = Util::stringToInt(node->getProperty("line")->mStringProperty);
    conNode.testing = NodeProcessor::getCondTesting(node);

    conNode.father = (context.size() >= 1)? context[context.size() -1] : -1;
    conNode.testing = NodeProcessor::getCondTesting(node);
    mConditionNodeVector.push_back(conNode);
}

void IfToIfelseAnalyzer::clearAnalyzerState()
{
    mConditionNodeVector.clear();
    mContextArray.clear();
}

void IfToIfelseAnalyzer::isIfToIfelse(const vector<int> &conSet)
{
    if(conSet.size() < 2)
	return ;

    for(int id = 1; id < conSet.size(); id++)
    {
	if(mConditionNodeVector[conSet[id]].father == mConditionNodeVector[conSet[id - 1]].father)
	{
	    if(mConditionNodeVector[conSet[id]].testing.find(mConditionNodeVector[conSet[id -1]].testing) != string::npos)
	    {
		log(mConditionNodeVector[conSet[id -1]].iContextLine);
	    }
	}
    }
}

void IfToIfelseAnalyzer::log(int lineNum)
{
    Logger::a("IfToIfelseAnalyzer") << "if statement list can be changed to ifelse" \
	<< SrcManager::getInstance().getFullFileName() << ":" << lineNum \
	<< SrcManager::getInstance().getLine(lineNum) << endl;
    stringstream reportMsgStream;
    reportMsgStream << "IfToIfelseAnalyzer: if statement list can be changed to ifelse" << endl;
    string reportMsg = reportMsgStream.str();
    ReportManager::getInstance().insertReport(SrcManager::getInstance().getFullFileName(), lineNum, reportMsg);
    ProblemList::GetInstance().Add((char*) "IfToIfelseAnalyzer", SrcManager::getInstance().getFullFileName(), lineNum);
}
